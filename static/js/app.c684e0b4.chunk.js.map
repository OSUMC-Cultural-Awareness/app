{"version":3,"sources":["src/views/Culture/style.ts","src/views/Culture/InsightCard.tsx","src/views/Culture/Insights.tsx","src/views/Culture/ToolsFAB.tsx","src/lib/api.ts","src/storage.ts","src/lib/ledger.ts","src/lib/feedback.ts","src/lib/admin.ts","src/lib/culture.ts","src/views/Culture/Culture.tsx","src/views/Culture/index.ts","src/redux/UserReducer.ts","src/redux/UserAction.ts","src/redux/ThemeAction.ts","src/redux/index.ts","src/redux/ThemeReducer.ts","src/views/Login/validation.ts","src/views/Login/Login.tsx","src/views/Login/index.ts","src/views/Register/explanationText.ts","src/views/Register/validation.ts","src/views/Register/Register.tsx","src/views/Register/index.ts","src/constants.ts","src/theme.ts","src/views/Home/styles.ts","src/views/Home/Cultures.tsx","src/views/Home/validation.ts","src/views/Home/Admins.tsx","src/views/Home/Home.tsx","src/views/Home/index.ts","src/views/EditInsight/EditInsight.tsx","src/views/EditInsight/index.ts","src/views/Recovery/validation.ts","src/views/Recovery/Recovery.tsx","src/views/Recovery/index.ts","src/views/Settings/ThemeToggler.tsx","src/views/Settings/styles.ts","src/views/Settings/DownloadedCultures.tsx","src/views/Settings/Feedback.tsx","src/views/Settings/AccountSettings.tsx","src/views/Settings/Settings.tsx","src/views/Settings/index.ts","src/views/Header.tsx","src/routes.ts","src/index.tsx"],"names":["StyleSheet","create","spinner","top","position","specialAddInsight","padding","marginVertical","marginHorizontal","view","flex","card","fab","Platform","OS","undefined","InsightCard","props","insight","index","editing","onPress","onAction","link","source","data","Card","style","styles","Content","Title","summary","Paragraph","information","Actions","Linking","canOpenURL","IconButton","icon","size","Clipboard","setString","type","openURL","onDelete","Insights","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","refresh","SafeAreaView","FlatList","keyExtractor","_","toString","ToolsFAB","open","setOpen","FAB","Group","visible","actions","onAdd","onSave","onStateChange","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","API_URL","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","Admin","name","email","superUser","getAuth","password","post","put","passwordConfirmation","password_confirmation","res","delete","Culture","generalInsights","specializedInsights","modified","this","general_insights","specialized_insights","specializedInsightsObj","forEach","val","key","culture","get","Map","Object","entries","map","Storage","list","a","async","AsyncStorage","getItem","Ledger","ledger","parse","saveLedger","cultures","setItem","add","info","compressed","Pako","to","set","updatedCultures","has","storedData","removeItem","Feedback","feedback","Tab","createMaterialTopTabNavigator","ExampleInsight","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","msg","setMsg","banner","setBanner","dirty","setDirty","useRoute","useEffect","setOptions","title","fetchCulture","React","addListener","e","preventDefault","confirm","dispatch","action","Alert","alert","text","cancelable","setCultureInPlace","newCulture","read","console","error","Date","now","navigate","hideSnackbar","onCardAction","deleteInsight","Array","i","splice","length","InsightCardView","View","Banner","label","Navigator","initialRouteName","Screen","row","item","from","Accordion","id","Button","mode","update","setParams","prevName","getFocusedRouteNameFromRoute","push","Portal","Snackbar","onDismiss","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","Yup","shape","required","initialValues","justifyContent","margin","overflow","recover","bottom","Login","bindActionCreators","remember","setRemember","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","Validation","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","RememberedEmail","getEmail","fields","CommonActions","reset","routes","TextInput","autoFocus","textContentType","left","Icon","ref","value","onBlur","onChangeText","HelperText","secureTextEntry","right","Checkbox","Item","uppercase","min","max","matches","oneOf","color","fontWeight","Register","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","RegisterHelpText","onFocus","Text","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","modalLight","backgroundColor","background","modalDark","div","deleteButton","Cultures","offline","flexDirection","deleteCulture","EmailValidation","EmailNameValidation","admins","deleteModal","setDeleteModal","editModal","setEditModal","selectedItem","setSelectedItem","onEdit","admin","superUserDeleteCheck","Modal","contentContainerStyle","disabled","Home","setCultures","setAdmins","inviteModal","setInviteModal","setOffline","invite","fetchCultures","fetchAdmins","field","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","setCultureName","placeholder","Divider","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","alignSelf","Recovery","updateAccount","updatePassword","Theme","getTheme","newTheme","log","rightIcon","leftIcon","characterCounter","fontSize","paddingRight","paddingBottom","button","DownloadedCultures","expanded","setExpanded","setLedger","fetchLedger","timer","setInterval","clearInterval","ledgerArray","description","dayjs","unix","remove","onUpdateFinish","extend","relativeTime","setFeedback","setState","FeedbackSender","send","AccountSettings","logout","rememberEmail","Settings","openLink","ScrollView","err","ripple","marginRight","HeaderButton","TouchableRipple","headerRight","prefixes","config","screens","path","decodeURI","general","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","component","options","Header","registerRootComponent"],"mappings":"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","file":"static/js/app.c684e0b4.chunk.js","sourcesContent":["import { StyleSheet, Platform } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  view: {\n    flex: 1,\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  fab: { position: (Platform.OS === \"web\" ? \"fixed\" : undefined) as any },\n});\n","import React from \"react\";\n\n// Clipboard is deprecated, but necessary because of incompatibility with Expo\n// See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\nimport { Linking, Clipboard } from \"react-native\";\n\nimport { Card, IconButton, Paragraph, Title } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\nexport type Action =\n  | \"copy\"\n  | { type: \"open\"; link: string }\n  | { type: \"delete\"; summary: string };\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n  // callback when an action is performed on an insight\n  //\n  // includes: Copying, Deleting, and Opening\n  onAction: (action: Action) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function InsightCard(\n  props: InsightCardProps\n): React.ReactElement {\n  const { insight, index, editing, onPress, onAction } = props;\n  const link = insight.source.data;\n\n  return (\n    <Card style={styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"link\"\n            size={20}\n            onPress={() => {\n              onAction(\"copy\");\n              Clipboard.setString(link);\n            }}\n          />\n        )}\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"login-variant\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"open\", link: link });\n              Linking.openURL(link);\n            }}\n          />\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"delete\", summary: insight.summary });\n              props.onDelete(index);\n            }}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, SafeAreaView } from \"react-native\";\n\nimport { ActivityIndicator } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: [string, GeneralInsight[]][] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    setRefreshing(true);\n    onRefresh();\n    setRefreshing(false);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { FAB } from \"react-native-paper\";\nimport styles from \"./style\";\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      open={open}\n      style={styles.fab}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n","import { API_URL } from \"../../env.json\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","// Locations to store information in {@link AsyncStorage}.\nexport namespace Storage {\n  // Location to store a user's email locally on user's device.\n  export const RememberedEmail = \"@rememberedEmail\";\n\n  // Location to store theme \"Light\" or \"Dark\" on user's device.\n  export const Theme = \"@theme\";\n\n  // Location to store ledger on user's device\n  export const Ledger = \"@ledger\";\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\nimport { Storage } from \"../storage\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(async (modified: number, name: string) => {\n      if (cultures.has(name) && cultures.get(name) < modified) {\n        add(name);\n      }\n    });\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(Storage.Ledger);\n    if (!data) {\n      return new Map();\n    }\n\n    let ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    if (!storedData) {\n      throw new Error(`${culture}: culture download not found`);\n    }\n\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  function saveLedger(cultures: Map<string, number>) {\n    let ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(Storage.Ledger, JSON.stringify(ledger));\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    let cultures = await list();\n    cultures.set(culture, info.modified);\n    saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    let cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    saveLedger(cultures);\n  }\n}\n","import { Api } from \"./api\";\n\nexport namespace Feedback {\n  /**\n   * send feedback to owner.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} feedback - to send\n   * @returns {Promise<void>}\n   */\n  export async function send(feedback: string): Promise<void> {\n    await Api.post(\"/feedback\", { feedback: feedback });\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin account\n   * @param {string} name - updated name\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async update(\n    email: string,\n    name: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(`/admins/${email}`, { name }, token);\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(culture: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${culture}`);\n\n    const { name, general_insights, specialized_insights, modified } = json;\n\n    return new this(\n      name,\n      general_insights,\n      new Map(Object.entries(specialized_insights)),\n      modified\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  static async list(): Promise<Map<string, number>> {\n    const json = await Api.get(\"/cultures\");\n    const data: { name: string; modified: number }[] = json[\"cultures\"];\n\n    return new Map(data.map((culture) => [culture.name, culture.modified]));\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    let specializedInsightsObj = {};\n    this.specializedInsights.forEach(\n      (val, key) => (specializedInsightsObj[key] = val)\n    );\n\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: specializedInsightsObj,\n      name: this.name,\n    };\n\n    await Api.put(`/cultures/${this.name}`, data, token);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View, Alert, Platform } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  ActivityIndicator,\n  List,\n  Button,\n  Snackbar,\n  Portal,\n  Banner,\n  FAB,\n} from \"react-native-paper\";\n\nimport InsightCard, { Action } from \"./InsightCard\";\nimport Insights from \"./Insights\";\nimport ToolsFAB from \"./ToolsFAB\";\nimport styles from \"./style\";\n\nimport { Culture, GeneralInsight, SpecializedInsight, Ledger } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  general: { insights: GeneralInsight[] };\n  specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\nconst adminNewCultureBanner = `Welcome to a brand new Culture!\n\n1. To add a new insight hit the tool button\n2. To edit an insight click on it\n3. Don't forget to save!\n`;\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n  const navigation = props.navigation;\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [banner, setBanner] = useState(false);\n  const [dirty, setDirty] = useState(props.route.params.dirty || false);\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), [\n    cultureName,\n  ]);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  // Prevent leaving with unsaved changes\n  React.useEffect(\n    () =>\n      navigation.addListener(\"beforeRemove\", (e) => {\n        const unsaved = dirty || props.route.params.dirty;\n\n        if (!unsaved) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (Platform.OS === \"web\") {\n          // @ts-ignore\n          const leave = confirm(\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\"\n          );\n\n          if (leave) {\n            navigation.dispatch(e.data.action);\n          }\n        } else {\n          Alert.alert(\n            \"Discard changes?\",\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\",\n            [\n              { text: \"Don't leave\", style: \"cancel\", onPress: () => {} },\n              {\n                text: \"Discard\",\n                style: \"destructive\",\n                onPress: () => navigation.dispatch(e.data.action),\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n      }),\n    [navigation, dirty, props.route.params.dirty]\n  );\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setDirty(true);\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        if (!token) {\n          // TODO: Display Magical Unicorn Culture\n          props.navigation.navigate(\"Home\");\n        } else {\n          setBanner(true);\n          setEditing(true);\n          setCulture(new Culture(cultureName, [], new Map(), Date.now()));\n        }\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n      setDirty(false);\n      navigation.setParams({\n        cultureName: cultureName,\n        dirty: false,\n        prevName: props.route.params.prevName,\n      });\n\n      if (props.route.params.prevName) {\n        try {\n          await Culture.delete(props.route.params.prevName, token);\n        } catch (err) {\n          setMsg(err.toString());\n        }\n      }\n    } catch (err) {\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setMsg(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onCardAction = (action: Action) => {\n    if (action === \"copy\") {\n      setMsg(\"Link copied!\");\n      return;\n    }\n\n    switch (action.type) {\n      case \"open\":\n        setMsg(`Opening ${action.link}`);\n        break;\n      case \"delete\":\n        setMsg(`Deleting ${action.summary}`);\n    }\n  };\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      const val = culture.specializedInsights.get(key);\n      val.splice(i, 1);\n\n      culture.specializedInsights.set(key, val);\n\n      if (val.length === 0) {\n        culture.specializedInsights.delete(key);\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"general\") {\n      case \"general\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"specialized\":\n        culture.specializedInsights.set(\"Specialized Insight\", [\n          ExampleInsight,\n        ]);\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights.set(key, [\n      ...culture.specializedInsights.get(key),\n      ExampleInsight,\n    ]);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onAction={onCardAction}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View style={styles.view}>\n      {token !== \"\" && (\n        <Banner\n          icon=\"alert\"\n          visible={banner}\n          actions={[{ label: \"Ok\", onPress: () => setBanner(false) }]}\n        >\n          {adminNewCultureBanner}\n        </Banner>\n      )}\n      <Tab.Navigator initialRouteName=\"general\">\n        <Tab.Screen name=\"general\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"specialized\">\n          {() => (\n            <Insights\n              insights={Array.from(culture.specializedInsights.entries())}\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              renderItem={(row: {\n                item: [string, GeneralInsight[]];\n                index: number;\n              }) => {\n                const [title, insights] = row.item;\n                return (\n                  <List.Accordion title={title} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [title, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(title)}\n                        mode=\"contained\"\n                        style={styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      {token !== \"\" && editing && (\n        <ToolsFAB onSave={() => updateCulture()} onAdd={addInsightOrCategory} />\n      )}\n      {token !== \"\" && !editing && (\n        <FAB.Group\n          icon=\"pencil\"\n          style={styles.fab}\n          open={false}\n          onPress={() => setEditing(!editing)}\n          visible={true}\n          actions={[]}\n          onStateChange={() => setEditing(!editing)}\n        />\n      )}\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import Culture from \"./Culture\";\n\nexport default Culture;\n","import { Admin } from \"../lib\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = () => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (theme: Store[\"theme\"]) => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import * as Yup from \"yup\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login\n * performs basic validation.\n */\nexport default Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport Validation from \"./validation\";\nimport { Storage } from \"../../storage\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(Storage.RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(Storage.RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      try {\n        await Admin.recover(values.email);\n        setMsg(`Sent email to ${values.email}`);\n      } catch (err) {\n        console.error(\"Failed to send recovery email: \", err);\n        setMsg(err.toString());\n      }\n    } else {\n      setMsg(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from \"./Login\";\n\nexport default Login;\n","/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport default {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need this if you ever forget your password.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check that you know the password.\",\n};\n","import * as Yup from \"yup\";\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport default Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { TermsOfServiceURL } from \"../../constants\";\n\nimport RegisterHelpText from \"./explanationText\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [msg, setMsg] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import Register from \"./Register\";\n\nexport default Register;\n","export const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n","import { StyleSheet, Platform } from \"react-native\";\n\nimport { darkTheme, lightTheme } from \"../../theme\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  view: {\n    flex: 1,\n  },\n\n  modalLight: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: lightTheme.colors.background,\n  },\n\n  modalDark: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: darkTheme.colors.background,\n  },\n\n  list: {\n    flex: 1,\n  },\n\n  div: {\n    margin: \"5px\",\n  },\n\n  deleteButton: {\n    backgroundColor: \"red\",\n  },\n\n  fab: {\n    position: (Platform.OS === \"web\" ? \"fixed\" : \"absolute\") as any,\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import React from \"react\";\nimport { View, FlatList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { ActivityIndicator, List, IconButton } from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\n\nimport { Culture, Ledger } from \"../../lib\";\n\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n  cultures: IterableIterator<[string, number]>;\n  onRefresh: () => void;\n  offline: boolean;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Cultures(props: CultureProps): React.ReactElement {\n  const { cultures, onRefresh, token, offline } = props;\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const deleteCulture = async (name: string) => {\n    try {\n      await Culture.delete(name, token);\n    } catch (err) {\n      console.error(\"Failed to delete culture\", err);\n    }\n    onRefresh();\n  };\n  return (\n    <View>\n      <FlatList\n        data={Array.from(cultures)}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          const [name] = item;\n          return (\n            <List.Item\n              title={name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  {!offline && (\n                    <IconButton\n                      icon=\"download\"\n                      onPress={() => Ledger.add(name)}\n                    />\n                  )}\n                  {token !== \"\" && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => deleteCulture(name)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import * as Yup from \"yup\";\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n});\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailNameValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  name: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { FlatList, Alert, View, Platform } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport {\n  List,\n  IconButton,\n  Modal,\n  Portal,\n  Text,\n  Button,\n  TextInput,\n  Snackbar,\n} from \"react-native-paper\";\nimport { useFormik } from \"formik\";\n\nimport { Store } from \"../../redux\";\nimport { Admin } from \"../../lib\";\nimport styles from \"./styles\";\nimport { EmailNameValidation } from \"./validation\";\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype EditFields = {\n  email: string;\n  name: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: EditFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  name: \"\",\n};\n\n/**\n * Properties for {@link Admins}\n */\ntype AdminProps = {\n  token: string;\n  admins: Admin[];\n  theme: string;\n  user: Admin;\n  onRefresh: () => void;\n};\n\n/**\n * Component that displays a list of components of {@link Admin}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Admins(props: AdminProps): React.ReactElement {\n  const { user, theme, token, admins, onRefresh } = props;\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [msg, setMsg] = useState<string>(\"\");\n\n  const name = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    validateField,\n    setFieldValue,\n  } = useFormik({\n    validationSchema: EmailNameValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => onEdit(values),\n  });\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onDelete = async () => {\n    try {\n      await Admin.delete(selectedItem.email, token);\n    } catch {\n      // show error message\n    }\n    onRefresh();\n  };\n\n  const onEdit = async (fields: EditFields) => {\n    const { name, email } = fields;\n    try {\n      Admin.update(email, name, props.token);\n      setEditModal(false);\n      onRefresh();\n    } catch {\n      // TODO: show error message\n    }\n  };\n\n  const superUserDeleteCheck = (item: any) => {\n    if (!item.superUser && item.email != user.email)\n      return (\n        <IconButton\n          icon=\"delete\"\n          onPress={() => {\n            setDeleteModal(true);\n            setSelectedItem(item);\n          }}\n        />\n      );\n  };\n\n  const handleEditClick = (admin: Admin) => {\n    setFieldValue(\"name\", admin.name);\n    setFieldValue(\"email\", admin.email);\n    setEditModal(true);\n  };\n\n  return (\n    <FlatList\n      style={{ flex: 1 }}\n      data={admins}\n      keyExtractor={(_, index) => index.toString()}\n      renderItem={({ item }) => {\n        return (\n          <View>\n            <List.Item\n              title={item.email}\n              right={() =>\n                props.token !== \"\" && (\n                  <View style={{ flexDirection: \"row\" }}>\n                    <IconButton\n                      icon=\"pencil\"\n                      onPress={() => handleEditClick(item)}\n                    />\n                    {superUserDeleteCheck(item)}\n                  </View>\n                )\n              }\n            />\n            <Portal>\n              {deleteModal && (\n                <Modal\n                  visible={deleteModal}\n                  contentContainerStyle={\n                    theme === \"Dark\" ? styles.modalDark : styles.modalLight\n                  }\n                  onDismiss={() => setDeleteModal(false)}\n                >\n                  {/*TODO: update style for text */}\n                  <Text>\n                    Are you sure you want to delete {selectedItem.email}?\n                  </Text>\n                  <Button\n                    mode=\"contained\"\n                    onPress={() => {\n                      onDelete();\n                      setDeleteModal(false);\n                    }}\n                    style={styles.deleteButton}\n                  >\n                    Delete\n                  </Button>\n                </Modal>\n              )}\n            </Portal>\n            <Portal>\n              {editModal && (\n                <Modal\n                  visible={editModal}\n                  contentContainerStyle={\n                    theme === \"Dark\" ? styles.modalDark : styles.modalLight\n                  }\n                  onDismiss={() => setEditModal(false)}\n                >\n                  {/*TODO: update style for text */}\n                  <Text>Edit admin Account</Text>\n                  <TextInput\n                    mode=\"outlined\"\n                    left={<TextInput.Icon name=\"email\" />}\n                    label=\"email\"\n                    value={values.email}\n                    disabled={true}\n                  />\n                  <TextInput\n                    autoFocus={true}\n                    textContentType=\"name\"\n                    mode=\"outlined\"\n                    left={<TextInput.Icon name=\"account-badge\" />}\n                    error={errors.name && touched.name}\n                    label=\"name\"\n                    value={values.name}\n                    ref={name}\n                    onBlur={handleBlur(\"name\")}\n                    onChangeText={handleChange(\"name\")}\n                  />\n                  <View style={styles.div} />\n                  <Button mode=\"contained\" onPress={handleSubmit}>\n                    Save\n                  </Button>\n                </Modal>\n              )}\n            </Portal>\n            <Portal>\n              <Snackbar\n                visible={msg !== \"\"}\n                onDismiss={hideSnackbar}\n                action={{\n                  label: \"Ok\",\n                  onPress: hideSnackbar,\n                }}\n              >\n                {msg}\n              </Snackbar>\n            </Portal>\n          </View>\n        );\n      }}\n    />\n  );\n}\n\nexport default connect(\n  (state: Store) => ({\n    user: state.user.user,\n    theme: state.theme,\n  }),\n  null\n)(Admins);\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { View } from \"react-native\";\n\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport {\n  Portal,\n  Modal,\n  Text,\n  ActivityIndicator,\n  TextInput,\n  Button,\n  FAB,\n  Snackbar,\n} from \"react-native-paper\";\nimport { useFormik } from \"formik\";\n\nimport { Store } from \"../../redux\";\nimport { Admin, Culture, OfflineError, Ledger } from \"../../lib\";\nimport { Routes } from \"../../routes\";\n\nimport Cultures from \"./Cultures\";\nimport Admins from \"./Admins\";\nimport styles from \"./styles\";\nimport { EmailValidation } from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n  theme: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype EmailField = {\n  email: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: EmailField = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const { token, route, navigation, user, theme } = props;\n\n  const [cultures, setCultures] = useState<Map<string, number>>(null);\n  const [admins, setAdmins] = useState(null);\n  const [inviteModal, setInviteModal] = React.useState(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [offline, setOffline] = useState(false);\n\n  const email = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    validateField,\n  } = useFormik({\n    validationSchema: EmailValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => invite(values),\n  });\n\n  const fetchCultures = async () => {\n    try {\n      const cultures = await Culture.list();\n      setCultures(cultures);\n    } catch (err) {\n      if (err instanceof OfflineError) {\n        try {\n          const cultures = await Ledger.list();\n          setCultures(cultures);\n          setOffline(true);\n        } catch (err) {\n          setMsg(err.toString());\n        }\n      } else {\n        setMsg(err.toString());\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchCultures();\n  }, []);\n\n  const fetchAdmins = async () => {\n    if (!props.token) {\n      return;\n    }\n\n    try {\n      const admins = user.superUser ? await Admin.list(token) : [user];\n      setAdmins(admins);\n    } catch (err) {\n      setMsg(err.toString());\n    }\n  };\n\n  useEffect(() => {\n    fetchAdmins();\n  }, []);\n\n  if (!token) {\n    return (\n      <Cultures\n        navigation={props.navigation}\n        token={\"\"}\n        cultures={cultures?.entries()}\n        onRefresh={() => fetchCultures()}\n        offline={offline}\n      />\n    );\n  }\n\n  const onAdd = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"Cultures\") {\n      case \"Cultures\":\n        setCultures(\n          new Map([...cultures.entries(), [\"New Culture\", Date.now()]])\n        );\n        break;\n      case \"Admins\":\n        setInviteModal(true);\n    }\n  };\n\n  const invite = async (field: EmailField) => {\n    const { email } = field;\n    await validateField(\"email\");\n    try {\n      await Admin.invite(email, token);\n      setInviteModal(false);\n    } catch (err) {\n      setMsg(err.toString());\n    }\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  if (!admins) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              navigation={navigation}\n              token={token}\n              cultures={cultures?.entries()}\n              onRefresh={() => fetchCultures()}\n              offline={offline}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Admins\">\n          {() => (\n            <Admins\n              token={token}\n              admins={admins}\n              onRefresh={() => fetchAdmins()}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <FAB style={styles.fab} icon=\"plus\" onPress={onAdd} />\n      <Portal>\n        <Snackbar\n          visible={msg != \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{\n            label: \"Undo\",\n            onPress: () => setMsg(\"\"),\n          }}\n        >\n          {msg}\n        </Snackbar>\n        <Modal\n          visible={inviteModal}\n          contentContainerStyle={\n            theme === \"Dark\" ? styles.modalDark : styles.modalLight\n          }\n          onDismiss={() => setInviteModal(false)}\n        >\n          <Text>Invite a new admin</Text>\n          <TextInput\n            autoFocus={true}\n            textContentType=\"emailAddress\"\n            mode=\"outlined\"\n            left={<TextInput.Icon name=\"email\" />}\n            error={errors.email && touched.email}\n            label=\"email\"\n            value={values.email}\n            ref={email}\n            onBlur={handleBlur(\"email\")}\n            onChangeText={handleChange(\"email\")}\n          />\n          <View style={styles.div} />\n          <Button mode=\"contained\" onPress={handleSubmit}>\n            Send Invite\n          </Button>\n        </Modal>\n      </Portal>\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n    theme: state.theme,\n  }),\n  null\n)(Home);\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Portal,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights.get(index[0])[index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n  const [cultureName, setCultureName] = useState<string>(culture.name);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights.get(key);\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        culture.specializedInsights.delete(key);\n        culture.specializedInsights.set(title, specialized);\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    // set dirty if any changes have been made.\n    const prevName = culture.name;\n    const dirty =\n      category !== title ||\n      summary !== insight.summary ||\n      info !== insight.information ||\n      srcData !== insight.source.data ||\n      srcType !== insight.source.type ||\n      cultureName !== prevName;\n\n    culture.name = cultureName;\n\n    props.navigation.navigate(\"Culture\", {\n      cultureName: culture.name,\n      prevName: prevName,\n      dirty: dirty,\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.view}>\n      <TextInput\n        style={styles.input}\n        value={cultureName}\n        placeholder=\"Culture Name\"\n        label=\"Culture Name\"\n        mode=\"outlined\"\n        onChangeText={(text) => setCultureName(text)}\n      />\n      {isSpecialized && (\n        <TextInput\n          style={styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <Portal>\n        <FAB style={styles.fab} icon=\"check\" onPress={updateCulture} />\n      </Portal>\n    </SafeAreaView>\n  );\n}\n","import EditInsight from \"./EditInsight\";\n\nexport default EditInsight;\n","import * as Yup from \"yup\";\n\nexport default Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\nimport { Admin } from \"../../lib\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <Title style={styles.title}>Let's create a new password!</Title>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import Recovery from \"./Recovery\";\n\nexport default Recovery;\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../../redux\";\nimport { ThemeType } from \"../../theme\";\nimport { Storage } from \"../../storage\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(Storage.Theme, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => (\n          <IconButton {...props} icon=\"brightness-6\" onPress={handleChange} />\n        )}\n        right={(props) => (\n          <Checkbox\n            onPress={handleChange}\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n\n  input: {\n    padding: 20,\n  },\n\n  characterCounter: {\n    fontSize: 11,\n    right: 22,\n    position: \"absolute\",\n    bottom: 20,\n    paddingRight: 2,\n    paddingBottom: 2,\n  },\n\n  button: {\n    padding: 15,\n    margin: 10,\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../../lib\";\nimport styles from \"./styles\";\n\ndayjs.extend(relativeTime);\n\ntype Props = {\n  // Callback fired when \"Update All\" is pressed.\n  onUpdateFinish: (err: string | null) => void;\n};\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(props: Props): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n      props.onUpdateFinish(null);\n    } catch (err) {\n      props.onUpdateFinish(err.toString());\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      {expanded && (\n        <Button mode=\"contained\" onPress={() => update()}>\n          Update All\n        </Button>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { List, TextInput, Text, Button } from \"react-native-paper\";\n\nimport { Feedback as FeedbackSender } from \"../../lib\";\nimport styles from \"./styles\";\n\nconst characterLimit = 300;\n\ntype state = \"sending\" | \"sent\" | \"failed\" | \"writing\";\n\nexport default function Feedback(): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n  const [state, setState] = useState<state>(\"writing\");\n\n  const handleInput = (text: string) => {\n    if (text.length > characterLimit) {\n      return;\n    }\n\n    setFeedback(text);\n  };\n\n  const sendFeedback = async () => {\n    if (feedback === \"\") {\n      return;\n    }\n\n    setState(\"sending\");\n    try {\n      await FeedbackSender.send(feedback);\n    } catch (err) {\n      setState(\"failed\");\n      return;\n    }\n\n    setState(\"sent\");\n  };\n\n  const reset = () => {\n    setState(\"writing\");\n    setFeedback(\"\");\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        left={(props) => (\n          <List.Icon\n            {...props}\n            style={styles.leftIcon}\n            icon=\"message-reply-text\"\n          />\n        )}\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Feedback\"\n      >\n        {state === \"sent\" && (\n          <Button\n            icon=\"check\"\n            color=\"green\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={reset}\n          >\n            Thank you\n          </Button>\n        )}\n        {state === \"failed\" && (\n          <Button\n            icon=\"alert\"\n            color=\"yellow\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={() => setState(\"writing\")}\n          >\n            Try again later\n          </Button>\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <TextInput\n            style={styles.input}\n            mode=\"outlined\"\n            multiline={true}\n            label=\"Where can we improve?\"\n            value={feedback}\n            onChangeText={handleInput}\n            numberOfLines={4}\n            right={\n              state === \"writing\" ? (\n                <TextInput.Icon name=\"send\" onPress={() => sendFeedback()} />\n              ) : (\n                <TextInput.Icon name=\"check\" />\n              )\n            }\n          />\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <Text\n            style={styles.characterCounter}\n          >{`${feedback.length}/${characterLimit}`}</Text>\n        )}\n      </List.Accordion>\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton, Button } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Routes } from \"../../routes\";\nimport { Storage } from \"../../storage\";\nimport styles from \"./styles\";\n\ntype Props = {\n  token: string;\n  logout: () => void;\n  email: string;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n};\n\n/**\n * AccountSettings displays Log in/Log out and whether or not to remember the user's email.\n *\n * @param {Props} props\n * @returns {React.ReactElement} React Component\n */\nexport default function AccountSettings(props: Props): React.ReactElement {\n  const { token, email, logout, navigation } = props;\n\n  const [expanded, setExpanded] = useState(false);\n  const [remember, setRemember] = useState(false);\n\n  useEffect(() => {\n    const getEmail = async () => {\n      let email: string;\n      try {\n        email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      } catch (err) {\n        setRemember(false);\n        return;\n      }\n\n      if (email) {\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  const rememberEmail = async () => {\n    switch (remember) {\n      case true:\n        try {\n          await AsyncStorage.removeItem(Storage.RememberedEmail);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(false);\n        break;\n      case false:\n        try {\n          await AsyncStorage.setItem(Storage.RememberedEmail, email);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(true);\n    }\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Account\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"account\" style={styles.leftIcon} />\n        )}\n      >\n        {token !== \"\" && (\n          <List.Item\n            title=\"Remember Email\"\n            onPress={() => rememberEmail()}\n            left={(props) => (\n              <IconButton\n                {...props}\n                icon=\"email\"\n                onPress={() => rememberEmail()}\n              />\n            )}\n            right={(props) => (\n              <Checkbox\n                onPress={() => rememberEmail()}\n                {...props}\n                status={remember ? \"checked\" : \"unchecked\"}\n              />\n            )}\n          />\n        )}\n      </List.Accordion>\n      {expanded && (\n        <View>\n          {!token ? (\n            <Button\n              icon=\"login\"\n              mode=\"contained\"\n              onPress={() => {\n                navigation.navigate(\"Login\");\n              }}\n            >\n              Log In\n            </Button>\n          ) : (\n            <Button\n              icon=\"logout\"\n              mode=\"contained\"\n              onPress={() => {\n                logout();\n                navigation.navigate(\"Home\");\n              }}\n            >\n              Log Out\n            </Button>\n          )}\n        </View>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Linking } from \"react-native\";\n\nimport {\n  Divider,\n  List,\n  IconButton,\n  Snackbar,\n  Portal,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { disclaimerURL } from \"../../constants\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport Feedback from \"./Feedback\";\nimport AccountSettings from \"./AccountSettings\";\nimport styles from \"./styles\";\n\ntype Props = {\n  resetUser: () => void;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n  token: string;\n  email: string;\n};\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nfunction Settings(props: Props): React.ReactElement {\n  const { token, email, resetUser, navigation } = props;\n\n  const openLink = () => Linking.openURL(disclaimerURL);\n  const [msg, setMsg] = useState(\"\");\n\n  return (\n    <ScrollView>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={openLink}\n        left={(props) => (\n          <IconButton\n            {...props}\n            style={styles.leftIcon}\n            onPress={openLink}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton\n            {...props}\n            icon=\"eye\"\n            style={styles.rightIcon}\n            onPress={openLink}\n          />\n        )}\n      />\n      <Divider />\n      <AccountSettings\n        email={email}\n        navigation={navigation}\n        token={token}\n        logout={resetUser}\n      />\n      <Divider />\n      <Feedback />\n      <Divider />\n      <DownloadedCultures\n        onUpdateFinish={(err) => setMsg(err || \"Update finished\")}\n      />\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </ScrollView>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Settings\">;\n    }\n  ) => ({\n    token: state.user.token,\n    email: state.user.user.email,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(Settings);\n","import Settings from \"./Settings\";\n\nexport default Settings;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { IconButton, Avatar, TouchableRipple } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\n\nimport { Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"center\" },\n  ripple: { marginRight: 15 },\n});\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {Props} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: Props): React.ReactElement {\n  const { name, navigation } = props;\n\n  return (\n    <View style={styles.view}>\n      {name === \"\" ? (\n        <IconButton\n          icon=\"dots-vertical\"\n          onPress={() => navigation.navigate(\"Settings\")}\n        />\n      ) : (\n        <TouchableRipple\n          style={styles.ripple}\n          onPress={() => navigation.navigate(\"Settings\")}\n        >\n          <Avatar.Text size={32} label={name[0]} />\n        </TouchableRipple>\n      )}\n    </View>\n  );\n}\n\nexport const HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  null\n)(RightHeaderButton);\n\nexport default ({ navigation }) => ({\n  headerRight: () => <HeaderButton navigation={navigation} />,\n});\n","import { Culture } from \"./lib\";\n\n/**\n * React Navigation Routes, for Mobile.\n *\n * Add type definitions and parameters for routes in {@link StackNavigator}\n */\nexport type Routes = {\n  /**\n   * Displays information about a culture, looking up information about that\n   * culture by provided prop {@link cultureName}.\n   *\n   * For admins it allows editing and adding information about a particular culture.\n   */\n  Culture: { cultureName: string; prevName?: string; dirty?: boolean };\n\n  /**\n   * Displays an interface to edit a {@link Culture} {@link GeneralInsight}\n   * and {@link SpecializedInsight}\n   *\n   * Admin **ONLY** route\n   */\n  EditInsight: { culture: Culture; index: number | [string, number] };\n\n  /**\n   * Displays Cultures allowing for downloads and seeing information\n   * about that culture and Admins.\n   *\n   * To see Admins must be logged in, to see others you need to\n   * be a superUser.\n   *\n   * Cultures can be deleted and edited.\n   */\n  Home: undefined;\n\n  /**\n   * Allows creation of a new admin account.\n   *\n   * @remark Route sent via email.\n   */\n  Register: { token: string };\n\n  /**\n   * Allows admin Login, Account recovery, and remembering the user's\n   * email between logins.\n   */\n  Login: undefined;\n\n  /**\n   * Allows Admin account recovery, requires the token and updates the Admin\n   * in the Api in order to update their password.\n   */\n  Recovery: { token: string; email: string };\n\n  /**\n   * Settings page displays downloaded cultures, dark theme, and disclaimer\n   * for application.\n   */\n  Settings: undefined;\n};\n\n/**\n * React Navigation links {@link Routes} to Web URLs.\n */\nexport const Linking = {\n  prefixes: [\"/\"],\n  config: {\n    screens: {\n      Home: \"/\",\n      Login: \"login\",\n      Register: \"register/:token\",\n      Recovery: \"recovery/:email/:token\",\n      Culture: {\n        path: \"culture/:cultureName\",\n        parse: {\n          cultureName: (cultureName: string) => decodeURI(cultureName),\n        },\n        screens: {\n          general: \"general\",\n          specialized: \"specialized\",\n        },\n      },\n      EditInsight: \"culture/edit/:culture/:index\",\n      Settings: \"settings\",\n    },\n  },\n};\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  Culture,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n  Header,\n  HeaderButton,\n} from \"./views\";\n\nimport { Routes, Linking } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\nimport { Storage } from \"./storage\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n\n  return (\n    <NavigationContainer\n      linking={Linking}\n      theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n    >\n      <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Culture\" component={Culture} options={Header} />\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={({ navigation }) => ({\n              headerRight: () => <HeaderButton navigation={navigation} />,\n              title: \"Cultural Awareness\",\n            })}\n          />\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Register\" component={Register} />\n          <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n          <Stack.Screen name=\"Settings\" component={Settings} />\n          <Stack.Screen name=\"Recovery\" component={Recovery} />\n        </Stack.Navigator>\n      </PaperProvider>\n    </NavigationContainer>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}