{"version":3,"sources":["src/views/Culture/style.ts","src/views/Culture/InsightCard.tsx","src/views/Culture/Insights.tsx","src/views/Culture/ToolsFAB.tsx","src/views/Header.tsx","src/lib/api.ts","src/lib/admin.ts","src/lib/culture.ts","src/storage.ts","src/lib/ledger.ts","src/lib/feedback.ts","src/views/Culture/Culture.tsx","src/views/Culture/index.ts","src/redux/UserReducer.ts","src/redux/UserAction.ts","src/redux/ThemeAction.ts","src/redux/index.ts","src/redux/ThemeReducer.ts","src/views/Login/validation.ts","src/views/Login/Login.tsx","src/views/Login/index.ts","src/views/Register/explanationText.ts","src/views/Register/validation.ts","src/views/Register/Register.tsx","src/views/Register/index.ts","src/constants.ts","src/theme.ts","src/views/Home/styles.ts","src/views/Home/Cultures.tsx","src/views/Home/validation.ts","src/views/Home/EditModal.tsx","src/views/Home/Admins.tsx","src/views/Home/InviteModal.tsx","src/views/Home/Home.tsx","src/views/Home/index.ts","src/views/EditInsight/EditInsight.tsx","src/views/EditInsight/index.ts","src/views/EditInsight/validation.ts","src/views/Recovery/validation.ts","src/views/Recovery/Recovery.tsx","src/views/Recovery/index.ts","src/views/Settings/ThemeToggler.tsx","src/views/Settings/styles.ts","src/views/Settings/DownloadedCultures.tsx","src/views/Settings/Feedback.tsx","src/views/Settings/AccountSettings.tsx","src/views/Settings/Settings.tsx","src/views/Settings/index.ts","src/routes.ts","src/index.tsx"],"names":["StyleSheet","create","spinner","top","position","specialAddInsight","padding","marginVertical","marginHorizontal","view","flex","card","fab","Platform","OS","InsightCard","props","insight","index","editing","onPress","onAction","link","source","data","Card","style","styles","Content","Title","summary","Paragraph","information","Actions","Linking","canOpenURL","IconButton","icon","size","Clipboard","setString","type","openURL","onDelete","Insights","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","refresh","SafeAreaView","FlatList","keyExtractor","_","toString","ToolsFAB","open","setOpen","FAB","Group","visible","actions","onAdd","onSave","onStateChange","flexDirection","innerView","justifyContent","ripple","marginRight","searchView","marginEnd","title","fontWeight","HeaderButton","connect","state","ownProps","name","user","navigation","showSearch","onSearchStart","onCancel","View","navigate","TouchableRipple","Text","label","Header","searchQuery","onSearchChange","searchBarStyles","height","headerTitle","Searchbar","autoFocus","placeholder","onChangeText","value","headerRight","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","API_URL","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","undefined","Admin","email","superUser","getAuth","password","post","put","passwordConfirmation","password_confirmation","res","delete","Culture","generalInsights","specializedInsights","modified","this","general_insights","specialized_insights","previousName","specializedInsightsObj","forEach","val","key","culture","get","Map","Object","entries","map","Ledger","list","updatedCultures","cultures","a","async","has","add","AsyncStorage","getItem","Storage","ledger","parse","storedData","Pako","to","setItem","info","compressed","set","saveLedger","removeItem","Feedback","feedback","Tab","createMaterialTopTabNavigator","ExampleInsight","route","cultureName","params","setCulture","setEditing","msg","setMsg","banner","setBanner","dirty","setDirty","setSearchQuery","setShowSearch","useRoute","useLayoutEffect","header","text","setOptions","useEffect","fetchCulture","React","addListener","e","preventDefault","confirm","dispatch","action","Alert","alert","cancelable","setCultureInPlace","newCulture","read","console","error","Date","now","hideSnackbar","onCardAction","specialized","query","deleteInsight","Array","i","splice","length","InsightCardView","generalResults","filter","content","toLowerCase","includes","generalInsightResults","specializedResults","from","category","q","topic","Banner","Navigator","initialRouteName","Screen","row","item","Accordion","id","Button","mode","update","prevName","setParams","getFocusedRouteNameFromRoute","push","Portal","Snackbar","onDismiss","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","Yup","shape","required","initialValues","margin","overflow","recover","bottom","Login","bindActionCreators","remember","setRemember","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","Validation","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","getEmail","fields","CommonActions","reset","routes","TextInput","textContentType","onSubmitEditing","ref","current","focus","left","Icon","keyboardType","onBlur","returnKeyType","HelperText","secureTextEntry","right","Checkbox","Item","uppercase","min","max","matches","oneOf","color","Register","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","RegisterHelpText","nextInput","onFocus","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","modalLight","backgroundColor","background","modalDark","div","deleteButton","ListActions","editModalInput","paddingBottom","cultureListActions","dialogButton","Cultures","offline","onMsg","setLedger","loadLedger","useFocusEffect","useCallback","results","nameLower","onDownload","EmailValidation","EmailNameValidation","EditModal","admin","show","onErr","useTheme","setErrors","validateForm","Dialog","surface","disabled","admins","deleteModal","setDeleteModal","editModal","setEditModal","selectedAdmin","setSelectedAdmin","InviteModal","invite","field","Home","setCultures","setAdmins","inviteModal","setInviteModal","setOffline","fetchCultures","fetchAdmins","cultureNames","err","alignSelf","input","paddingHorizontal","sourceTypeTitle","EditInsight","isSpecialized","description","sourceType","updateCulture","newInsight","Divider","multiline","numberOfLines","RadioButton","onValueChange","Recovery","updateAccount","updatePassword","getTheme","newTheme","log","rightIcon","leftIcon","characterCounter","fontSize","paddingRight","button","DownloadedCultures","expanded","setExpanded","fetchLedger","timer","setInterval","clearInterval","ledgerArray","dayjs","unix","remove","onUpdateFinish","extend","relativeTime","setFeedback","setState","sendFeedback","FeedbackSender","send","AccountSettings","logout","rememberEmail","Settings","openLink","ScrollView","prefixes","config","screens","path","decodeURI","general","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","StatusBar","component","options","headerTitleAlign","headerBackTitleVisible","registerRootComponent"],"mappings":"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","file":"static/js/app.a4cbfd6f.chunk.js","sourcesContent":["import { StyleSheet, Platform } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  view: {\n    flex: 1,\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  // HACK: Any here so that FABs are Fixed on web, but use the default styling on Mobile.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fab: { position: (Platform.OS === \"web\" ? \"fixed\" : \"absolute\") as any },\n});\n","import React from \"react\";\n\n// Clipboard is deprecated, but necessary because of incompatibility with Expo\n// See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\nimport { Linking, Clipboard } from \"react-native\";\n\nimport { Card, IconButton, Paragraph, Title } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\nexport type Action =\n  | \"copy\"\n  | { type: \"open\"; link: string }\n  | { type: \"delete\"; summary: string };\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n  // callback when an action is performed on an insight\n  //\n  // includes: Copying, Deleting, and Opening\n  onAction: (action: Action) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function InsightCard(\n  props: InsightCardProps\n): React.ReactElement {\n  const { insight, index, editing, onPress, onAction } = props;\n  const link = insight.source.data;\n\n  return (\n    <Card style={styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"link\"\n            size={20}\n            onPress={() => {\n              onAction(\"copy\");\n              Clipboard.setString(link);\n            }}\n          />\n        )}\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"login-variant\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"open\", link: link });\n              Linking.openURL(link);\n            }}\n          />\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"delete\", summary: insight.summary });\n              props.onDelete(index);\n            }}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, SafeAreaView } from \"react-native\";\n\nimport { ActivityIndicator } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: [string, GeneralInsight[]][] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    setRefreshing(true);\n    onRefresh();\n    setRefreshing(false);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { FAB } from \"react-native-paper\";\nimport styles from \"./style\";\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      open={open}\n      style={styles.fab}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n","import React from \"react\";\nimport { View, StyleSheet, Platform } from \"react-native\";\n\nimport {\n  IconButton,\n  Avatar,\n  TouchableRipple,\n  Searchbar,\n  Title,\n} from \"react-native-paper\";\nimport {\n  StackNavigationProp,\n  StackNavigationOptions,\n} from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\n\nimport { Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype RightHeaderButtonProps = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n  showSearch: boolean;\n  onSearchStart: () => void;\n  onCancel: () => void;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, flexDirection: \"row\" },\n\n  innerView: { justifyContent: \"center\" },\n\n  ripple: { marginRight: 15 },\n\n  searchView: { marginEnd: 25 },\n\n  title: { fontWeight: \"600\" },\n});\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {RightHeaderButtonProps} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: RightHeaderButtonProps): React.ReactElement {\n  const { name, showSearch, navigation, onSearchStart, onCancel } = props;\n\n  return (\n    <View style={styles.view}>\n      <View style={styles.innerView}>\n        {showSearch ? (\n          <IconButton icon=\"cancel\" onPress={onCancel} />\n        ) : (\n          <IconButton icon=\"magnify\" onPress={onSearchStart} />\n        )}\n      </View>\n      <View style={styles.innerView}>\n        {name === \"\" ? (\n          <IconButton\n            icon=\"dots-vertical\"\n            onPress={() => navigation.navigate(\"Settings\")}\n          />\n        ) : (\n          <TouchableRipple\n            style={styles.ripple}\n            onPress={() => navigation.navigate(\"Settings\")}\n          >\n            <Avatar.Text size={32} label={name[0]} />\n          </TouchableRipple>\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  null\n)(RightHeaderButton);\n\ntype Props = {\n  title: string;\n  searchQuery?: string;\n  onSearchChange: (text: string) => void;\n  onSearchStart: () => void;\n  showSearch: boolean;\n  onCancel: () => void;\n};\n\n/**\n * Header.\n *\n * @param {Props} props\n */\nexport default function Header(\n  props: Props\n): (props: {\n  navigation: StackNavigationProp<Routes, \"Home\" | \"Culture\">;\n}) => {\n  headerTitle: StackNavigationOptions[\"headerTitle\"];\n  headerRight: StackNavigationOptions[\"headerRight\"];\n} {\n  const {\n    title,\n    showSearch,\n    searchQuery,\n    onSearchChange,\n    onSearchStart,\n    onCancel,\n  } = props;\n\n  let searchBarStyles = {};\n  if (Platform.OS === \"ios\") {\n    searchBarStyles = { height: 30 };\n  }\n\n  return ({ navigation }) => ({\n    headerTitle: () => (\n      <View style={styles.searchView}>\n        {showSearch ? (\n          <Searchbar\n            autoFocus={true}\n            placeholder=\"search\"\n            style={searchBarStyles}\n            onChangeText={onSearchChange}\n            value={searchQuery}\n          />\n        ) : (\n          <Title style={styles.title}>{title}</Title>\n        )}\n      </View>\n    ),\n    headerRight: () => (\n      <HeaderButton\n        navigation={navigation}\n        onSearchStart={onSearchStart}\n        showSearch={showSearch}\n        onCancel={onCancel}\n      />\n    ),\n  });\n}\n","import { API_URL } from \"../../env.json\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Record<string, unknown>} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(\n    endpoint: string,\n    body: Record<string, unknown> = {},\n    token: string\n  ): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Record<string, unknown>} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(\n    endpoint: string,\n    body: Record<string, unknown> = {},\n    token?: string\n  ): Promise<any> {\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    const json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    const json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    const json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin account\n   * @param {string} name - updated name\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async update(\n    email: string,\n    name: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(`/admins/${email}`, { name }, token);\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(culture: string): Promise<Culture> {\n    const json = await Api.get(`/cultures/${culture}`);\n\n    const { name, general_insights, specialized_insights, modified } = json;\n\n    return new this(\n      name,\n      general_insights,\n      new Map(Object.entries(specialized_insights)),\n      modified\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  static async list(): Promise<Map<string, number>> {\n    const json = await Api.get(\"/cultures\");\n    const data: { name: string; modified: number }[] = json[\"cultures\"];\n\n    return new Map(data.map((culture) => [culture.name, culture.modified]));\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @param {string} previousName - the previous name of the Culture\n   * @returns {Promise<void>}\n   */\n  async update(token: string, previousName?: string): Promise<void> {\n    const specializedInsightsObj = {};\n    this.specializedInsights.forEach(\n      (val, key) => (specializedInsightsObj[key] = val)\n    );\n\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: specializedInsightsObj,\n      name: this.name,\n    };\n\n    await Api.put(\n      `/cultures/${previousName ? previousName : this.name}`,\n      data,\n      token\n    );\n  }\n}\n","// Locations to store information in {@link AsyncStorage}.\n\n// Location to store a user's email locally on user's device.\nconst RememberedEmail = \"@rememberedEmail\";\n\n// Location to store theme \"Light\" or \"Dark\" on user's device.\nconst Theme = \"@theme\";\n\n// Location to store ledger on user's device\nconst Ledger = \"@ledger\";\n\nexport default { Theme, Ledger, RememberedEmail };\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\nimport Storage from \"../storage\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport default class Ledger {\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  static async update(): Promise<void> {\n    const updatedCultures = await Culture.list();\n    const cultures = await Ledger.list();\n\n    updatedCultures.forEach(async (modified: number, name: string) => {\n      if (cultures.has(name) && cultures.get(name) < modified) {\n        Ledger.add(name);\n      }\n    });\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  static async list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(Storage.Ledger);\n    if (!data) {\n      return new Map();\n    }\n\n    const ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  static async read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    if (!storedData) {\n      throw new Error(`${culture}: culture download not found`);\n    }\n\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  private static saveLedger(cultures: Map<string, number>): Promise<void> {\n    const ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(Storage.Ledger, JSON.stringify(ledger));\n    return;\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  static async add(culture: string): Promise<void> {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    const cultures = await Ledger.list();\n    cultures.set(culture, info.modified);\n    Ledger.saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  static async remove(culture: string): Promise<void> {\n    const cultures = await Ledger.list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    Ledger.saveLedger(cultures);\n  }\n}\n","import { Api } from \"./api\";\n\nexport default class Feedback {\n  /**\n   * send feedback to owner.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} feedback - to send\n   * @returns {Promise<void>}\n   */\n  static async send(feedback: string): Promise<void> {\n    await Api.post(\"/feedback\", { feedback: feedback });\n  }\n}\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { View, Alert, Platform } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  ActivityIndicator,\n  List,\n  Button,\n  Snackbar,\n  Portal,\n  Banner,\n  FAB,\n} from \"react-native-paper\";\n\nimport InsightCard, { Action } from \"./InsightCard\";\nimport Insights from \"./Insights\";\nimport ToolsFAB from \"./ToolsFAB\";\nimport Header from \"../Header\";\nimport styles from \"./style\";\n\nimport { Culture, GeneralInsight, SpecializedInsight, Ledger } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  general: { insights: GeneralInsight[] };\n  specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\nconst adminNewCultureBanner = `Welcome to a brand new Culture!\n\n1. To add a new insight hit the tool button\n2. To edit an insight click on it\n3. Don't forget to save!\n`;\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n  const navigation = props.navigation;\n\n  const [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [banner, setBanner] = useState(false);\n  const [dirty, setDirty] = useState(\n    props.route.params ? props.route.params.dirty : false\n  );\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearch, setShowSearch] = useState(false);\n  const route = useRoute();\n\n  useLayoutEffect(() => {\n    const header = Header({\n      title: cultureName,\n      searchQuery: searchQuery,\n      showSearch: showSearch,\n      onSearchChange: (text: string) => setSearchQuery(text),\n      onSearchStart: () => setShowSearch(true),\n      onCancel: () => setShowSearch(false),\n    });\n\n    navigation.setOptions(header({ navigation }));\n  }, [navigation, showSearch, searchQuery, cultureName]);\n\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  // Prevent leaving with unsaved changes\n  React.useEffect(\n    () =>\n      navigation.addListener(\"beforeRemove\", (e) => {\n        const unsaved = dirty || props.route.params.dirty;\n\n        if (!unsaved) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (Platform.OS === \"web\") {\n          // HACK: Use Web Confirmation when on Web Platform.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const leave = confirm(\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\"\n          );\n\n          if (leave) {\n            navigation.dispatch(e.data.action);\n          }\n        } else {\n          Alert.alert(\n            \"Discard changes?\",\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\",\n            [\n              {\n                text: \"Cancel\",\n                style: \"cancel\",\n                onPress: () => e.preventDefault(),\n              },\n              {\n                text: \"Discard\",\n                style: \"destructive\",\n                onPress: () => navigation.dispatch(e.data.action),\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n      }),\n    [navigation, dirty]\n  );\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setDirty(true);\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        if (!token) {\n          // TODO: Display Magical Unicorn Culture\n          props.navigation.navigate(\"Home\");\n        } else {\n          setBanner(true);\n          setEditing(true);\n          setCulture(new Culture(cultureName, [], new Map(), Date.now()));\n        }\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token, props.route.params.prevName);\n      setCultureInPlace(culture);\n      setDirty(false);\n      navigation.setParams({\n        cultureName: cultureName,\n        dirty: false,\n        prevName: props.route.params.prevName,\n      });\n    } catch (err) {\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setMsg(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onCardAction = (action: Action) => {\n    if (action === \"copy\") {\n      setMsg(\"Link copied!\");\n      return;\n    }\n\n    switch (action.type) {\n      case \"open\":\n        setMsg(`Opening ${action.link}`);\n        break;\n      case \"delete\":\n        setMsg(`Deleting ${action.summary}`);\n    }\n  };\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      const val = culture.specializedInsights.get(key);\n      val.splice(i, 1);\n\n      culture.specializedInsights.set(key, val);\n\n      if (val.length === 0) {\n        culture.specializedInsights.delete(key);\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"general\") {\n      case \"general\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"specialized\":\n        culture.specializedInsights.set(\"Specialized Insight\", [\n          ExampleInsight,\n        ]);\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights.set(key, [\n      ...culture.specializedInsights.get(key),\n      ExampleInsight,\n    ]);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onAction={onCardAction}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  const generalResults = generalInsightResults(\n    culture.generalInsights,\n    searchQuery\n  );\n\n  const specializedResults = specializedInsightResults(\n    culture.specializedInsights,\n    searchQuery\n  );\n\n  return (\n    <View style={styles.view}>\n      {token !== \"\" && (\n        <Banner\n          icon=\"alert\"\n          visible={banner}\n          actions={[{ label: \"Ok\", onPress: () => setBanner(false) }]}\n        >\n          {adminNewCultureBanner}\n        </Banner>\n      )}\n      <Tab.Navigator initialRouteName=\"general\">\n        <Tab.Screen name=\"general\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              insights={generalResults}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"specialized\">\n          {() => (\n            <Insights\n              insights={specializedResults}\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              renderItem={(row: {\n                item: [string, GeneralInsight[]];\n                index: number;\n              }) => {\n                const [title, insights] = row.item;\n                return (\n                  <List.Accordion title={title} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [title, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(title)}\n                        mode=\"contained\"\n                        style={styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      {token !== \"\" && editing && (\n        <ToolsFAB onSave={() => updateCulture()} onAdd={addInsightOrCategory} />\n      )}\n      {token !== \"\" && !editing && (\n        <FAB.Group\n          icon=\"pencil\"\n          style={styles.fab}\n          open={false}\n          onPress={() => setEditing(!editing)}\n          visible={true}\n          actions={[]}\n          onStateChange={() => setEditing(!editing)}\n        />\n      )}\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\n/**\n * Filers generalInsights based on search query.\n *\n * @param {GeneralInsight[]} insights\n * @param {string} search query\n *\n * @returns filtered general insights\n */\nfunction generalInsightResults(\n  insights: GeneralInsight[],\n  searchQuery: string\n): GeneralInsight[] {\n  return insights.filter((insight) => {\n    if (!searchQuery) {\n      return true;\n    }\n\n    const content = (insight.summary + insight.information).toLowerCase();\n    const query = searchQuery.toLowerCase();\n\n    return content.includes(query);\n  });\n}\n\n/**\n * Filters specializedInsights based on search query.\n *\n * @param {Map<string, GeneralInsight[]>} Specialized Insights\n * @param {string} query\n *\n * @returns {[string, GeneralInsight[]][]} filtered specialized insights\n */\nfunction specializedInsightResults(\n  specialized: Map<string, GeneralInsight[]>,\n  query: string\n): [string, GeneralInsight[]][] {\n  const specArray = Array.from(specialized.entries());\n  const matched: [string, GeneralInsight[]][] = specArray.map(\n    ([category, insights]) => {\n      if (!query) {\n        return [category, insights];\n      }\n\n      const filtered: GeneralInsight[] = insights.filter((insight) => {\n        if (!query) {\n          return true;\n        }\n        const content = (insight.summary + insight.information).toLowerCase();\n        const q = query.toLowerCase();\n\n        return content.includes(q);\n      });\n\n      return [category, filtered];\n    }\n  );\n\n  return matched.filter((topic) => topic[1].length !== 0);\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import Culture from \"./Culture\";\n\nexport default Culture;\n","import { Admin } from \"../lib\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n): Store[\"user\"] => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (\n  user: Store[\"user\"]\n): { type: string; payload: Store[\"user\"] } => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = (): {\n  type: string;\n  payload: Record<string, unknown>;\n} => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (\n  theme: Store[\"theme\"]\n): { type: string; payload: Store[\"theme\"] } => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n): string => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import * as Yup from \"yup\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login\n * performs basic validation.\n */\nexport default Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport Validation from \"./validation\";\nimport Storage from \"../../storage\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(Storage.RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(Storage.RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email !== undefined) {\n      setMsg(\"Account recovery requires a valid Email\");\n      return;\n    }\n\n    try {\n      await Admin.recover(values.email);\n      setMsg(`Sent email to ${values.email}`);\n    } catch (err) {\n      console.error(\"Failed to send recovery email: \", err);\n      setMsg(err.toString());\n    }\n  };\n\n  // focus the next input\n  const nextInput = (ref: React.MutableRefObject<any>): void => {\n    if (!ref) {\n      return;\n    }\n\n    ref.current.focus();\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          textContentType=\"emailAddress\"\n          autoFocus={true}\n          onSubmitEditing={() => nextInput(password)}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          keyboardType=\"email-address\"\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          returnKeyType=\"next\"\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          textContentType=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          onSubmitEditing={handleSubmit}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          returnKeyType=\"done\"\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from \"./Login\";\n\nexport default Login;\n","/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport default {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need this if you ever forget your password.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check that you know the password.\",\n};\n","import * as Yup from \"yup\";\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport default Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { TermsOfServiceURL } from \"../../constants\";\n\nimport RegisterHelpText from \"./explanationText\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [msg, setMsg] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  // focus the next input\n  const nextInput = (ref: React.MutableRefObject<any>): void => {\n    if (!ref) {\n      return;\n    }\n\n    ref.current.focus();\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          onSubmitEditing={() => nextInput(name)}\n          returnKeyType=\"next\"\n          mode=\"outlined\"\n          keyboardType=\"email-address\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          onSubmitEditing={() => nextInput(password)}\n          returnKeyType=\"next\"\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          onSubmitEditing={() => nextInput(passwordConfirmation)}\n          returnKeyType=\"next\"\n          textContentType=\"newPassword\"\n          keyboardType=\"visible-password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          onSubmitEditing={handleSubmit}\n          returnKeyType=\"done\"\n          textContentType=\"password\"\n          keyboardType=\"visible-password\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import Register from \"./Register\";\n\nexport default Register;\n","export const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n","import { StyleSheet, Platform } from \"react-native\";\n\nimport { darkTheme, lightTheme } from \"../../theme\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  view: {\n    flex: 1,\n  },\n\n  modalLight: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: lightTheme.colors.background,\n  },\n\n  modalDark: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: darkTheme.colors.background,\n  },\n\n  list: {\n    flex: 1,\n  },\n\n  div: {\n    margin: \"5px\",\n  },\n\n  deleteButton: {\n    backgroundColor: \"red\",\n    margin: 5,\n  },\n\n  fab: {\n    // HACK: Any here so that FABs are Fixed on web, but use the default styling on Mobile.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    position: (Platform.OS === \"web\" ? \"fixed\" : \"absolute\") as any,\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n\n  ListActions: {\n    flexDirection: \"row\",\n  },\n\n  editModalInput: {\n    paddingBottom: 10,\n  },\n\n  cultureListActions: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n\n  dialogButton: {\n    margin: 5,\n  },\n});\n","import React, { useState } from \"react\";\nimport { View, FlatList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { ActivityIndicator, List, IconButton } from \"react-native-paper\";\nimport { useFocusEffect } from \"@react-navigation/native\";\n\nimport { Routes } from \"../../routes\";\n\nimport { Culture, Ledger } from \"../../lib\";\n\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n  readonly cultures: [string, number][];\n  onRefresh: () => void;\n  searchQuery?: string;\n  offline: boolean;\n  onMsg: (msg: string) => void;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Cultures(props: CultureProps): React.ReactElement {\n  const { cultures, onRefresh, token, searchQuery, offline, onMsg } = props;\n  const [refreshing, setRefreshing] = useState(false);\n  const [ledger, setLedger] = useState(new Map());\n\n  const loadLedger = async () => {\n    try {\n      const ledger = await Ledger.list();\n      setLedger(ledger);\n    } catch (err) {\n      onMsg(err.toString());\n    }\n  };\n\n  useFocusEffect(\n    React.useCallback(() => {\n      loadLedger();\n    }, [])\n  );\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const onDelete = async (name: string) => {\n    try {\n      await Culture.delete(name, token);\n    } catch (err) {\n      onMsg(err.toString());\n      console.error(\"Failed to delete culture\", err);\n    }\n    onRefresh();\n  };\n\n  const onDownload = async (name: string) => {\n    try {\n      await Ledger.add(name);\n      loadLedger();\n      onMsg(`Downloaded ${name}`);\n    } catch (err) {\n      onMsg(err.toString());\n    }\n  };\n\n  const searchResults = (): [string, number][] => {\n    return cultures.filter((culture) => {\n      const [name] = culture;\n      if (!searchQuery) {\n        return true;\n      }\n\n      const nameLower = name.toLowerCase();\n      const query = searchQuery.toLowerCase();\n\n      return nameLower.includes(query);\n    });\n  };\n\n  const results = searchResults();\n\n  return (\n    <View>\n      <FlatList\n        data={results}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => {\n          setRefreshing(true);\n          onRefresh();\n          setRefreshing(false);\n        }}\n        refreshing={refreshing}\n        renderItem={({ item }) => {\n          const [name] = item;\n          return (\n            <List.Item\n              title={name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: name })\n              }\n              right={() => (\n                <View style={styles.cultureListActions}>\n                  {!offline && !ledger.has(name) && (\n                    <IconButton\n                      icon=\"download\"\n                      onPress={() => onDownload(name)}\n                    />\n                  )}\n                  {token !== \"\" && (\n                    <IconButton icon=\"delete\" onPress={() => onDelete(name)} />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import * as Yup from \"yup\";\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n});\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailNameValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  name: Yup.string().required(\"Required\"),\n});\n","import React, { useRef, useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { useFormik } from \"formik\";\nimport {\n  Dialog,\n  TextInput,\n  Button,\n  useTheme,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Admin } from \"../../lib\";\n\nimport { EmailNameValidation } from \"./validation\";\nimport styles from \"./styles\";\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype Fields = {\n  email: string;\n  name: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: Fields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  name: \"\",\n};\n\ntype Props = {\n  token: string;\n  show: boolean;\n  admin: Admin;\n  onDismiss: () => void;\n  onErr: (err: string) => void;\n  onRefresh: () => void;\n};\n\nexport default function EditModal(props: Props): React.ReactElement {\n  const { admin, token, show, onDismiss, onErr, onRefresh } = props;\n  const name = useRef();\n  const theme = useTheme();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setErrors,\n    validateForm,\n    setFieldValue,\n  } = useFormik({\n    validationSchema: EmailNameValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => update(values),\n  });\n\n  useEffect(() => {\n    setFieldValue(\"email\", admin?.email);\n    setFieldValue(\"name\", admin?.name);\n  }, [admin]);\n\n  const update = async (fields: Fields) => {\n    const { name, email } = fields;\n\n    await validateForm();\n\n    if (name === admin.name) {\n      setErrors({ ...errors, name: \"That's your current name\" });\n      return;\n    }\n\n    try {\n      await Admin.update(email, name, token);\n      onDismiss();\n      onRefresh();\n    } catch (err) {\n      onErr(err.toString());\n    }\n  };\n\n  return (\n    <Dialog\n      visible={show}\n      onDismiss={onDismiss}\n      style={{ backgroundColor: theme.colors.surface }}\n    >\n      <Dialog.Title>Edit {admin?.name}</Dialog.Title>\n      <Dialog.Content>\n        <TextInput\n          mode=\"outlined\"\n          style={styles.editModalInput}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          value={values.email}\n          disabled={true}\n        />\n        <View>\n          <TextInput\n            autoFocus={true}\n            textContentType=\"name\"\n            mode=\"outlined\"\n            left={<TextInput.Icon name=\"account\" />}\n            error={errors.name && touched.name}\n            onSubmitEditing={handleSubmit}\n            returnKeyType=\"done\"\n            label=\"name\"\n            value={values.name}\n            ref={name}\n            onBlur={handleBlur(\"name\")}\n            onChangeText={handleChange(\"name\")}\n          />\n          {errors.name && touched.name && (\n            <HelperText type=\"error\">{errors.name}</HelperText>\n          )}\n        </View>\n      </Dialog.Content>\n      <Dialog.Actions>\n        <Button style={styles.dialogButton} onPress={onDismiss}>\n          Cancel\n        </Button>\n        <Button\n          style={styles.dialogButton}\n          mode=\"contained\"\n          onPress={handleSubmit}\n        >\n          Save\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport {\n  List,\n  IconButton,\n  Dialog,\n  Portal,\n  Button,\n  useTheme,\n} from \"react-native-paper\";\n\nimport { Store } from \"../../redux\";\nimport { Admin } from \"../../lib\";\n\nimport EditModal from \"./EditModal\";\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Admins}\n */\ntype Props = {\n  token: string;\n  admins: Admin[];\n  theme: string;\n  user: Admin;\n  onRefresh: () => void;\n  searchQuery?: string;\n  onMsg: (msg: string) => void;\n};\n\n/**\n * Component that displays a list of components of {@link Admin}\n *\n * @param {Props} props\n * @returns {React.ReactElement} React component\n */\nfunction Admins(props: Props): React.ReactElement {\n  const { user, token, admins, onRefresh, searchQuery, onMsg } = props;\n  const theme = useTheme();\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [selectedAdmin, setSelectedAdmin] = useState(null);\n\n  const onDelete = async () => {\n    try {\n      await Admin.delete(selectedAdmin.email, token);\n      onRefresh();\n    } catch (err) {\n      onMsg(err.toString());\n    }\n  };\n\n  const searchResults = (): Admin[] => {\n    return admins.filter((admin) => {\n      if (!searchQuery) {\n        return true;\n      }\n\n      const name = admin.email.toLowerCase();\n      const query = searchQuery.toLowerCase();\n\n      return name.includes(query);\n    });\n  };\n\n  return (\n    <FlatList\n      style={styles.list}\n      data={searchResults()}\n      keyExtractor={(_, index) => index.toString()}\n      renderItem={({ item }) => {\n        return (\n          <View>\n            <List.Item\n              title={item.email}\n              right={() =>\n                props.token !== \"\" && (\n                  <View style={styles.ListActions}>\n                    <IconButton\n                      icon=\"pencil\"\n                      onPress={() => {\n                        setEditModal(true);\n                        setSelectedAdmin(item);\n                      }}\n                    />\n                    {!item.superUser && item.email != user.email && (\n                      <IconButton\n                        icon=\"delete\"\n                        onPress={() => {\n                          setDeleteModal(true);\n                          setSelectedAdmin(item);\n                        }}\n                      />\n                    )}\n                  </View>\n                )\n              }\n            />\n            <Portal>\n              <Dialog\n                visible={deleteModal}\n                onDismiss={() => setDeleteModal(false)}\n                style={{ backgroundColor: theme.colors.surface }}\n              >\n                <Dialog.Title>\n                  Are you sure you want to delete {selectedAdmin?.email}?\n                </Dialog.Title>\n                <Dialog.Actions>\n                  <Button\n                    style={styles.dialogButton}\n                    onPress={() => setDeleteModal(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    mode=\"contained\"\n                    onPress={() => {\n                      onDelete();\n                      setDeleteModal(false);\n                    }}\n                    style={styles.deleteButton}\n                  >\n                    Delete\n                  </Button>\n                </Dialog.Actions>\n              </Dialog>\n              <EditModal\n                show={editModal}\n                token={token}\n                admin={selectedAdmin}\n                onDismiss={() => setEditModal(false)}\n                onErr={onMsg}\n                onRefresh={onRefresh}\n              />\n            </Portal>\n          </View>\n        );\n      }}\n    />\n  );\n}\n\nexport default connect(\n  (state: Store) => ({\n    user: state.user.user,\n    theme: state.theme,\n  }),\n  null\n)(Admins);\n","import React, { useRef } from \"react\";\nimport { useFormik } from \"formik\";\nimport { Dialog, TextInput, Button } from \"react-native-paper\";\nimport { useTheme } from \"react-native-paper\";\n\nimport { Admin } from \"../../lib\";\n\nimport { EmailValidation } from \"./validation\";\nimport styles from \"./styles\";\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype Fields = {\n  email: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: Fields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n};\n\ntype Props = {\n  token: string;\n  show: boolean;\n  onDismiss: () => void;\n  onErr: (err: string) => void;\n};\n\nexport default function InviteModal(props: Props): React.ReactElement {\n  const { token, show, onDismiss, onErr } = props;\n  const theme = useTheme();\n\n  const email = useRef();\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    validateField,\n  } = useFormik({\n    validationSchema: EmailValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => invite(values),\n  });\n\n  const invite = async (field: Fields) => {\n    const { email } = field;\n    await validateField(\"email\");\n\n    try {\n      await Admin.invite(email, token);\n      onDismiss();\n    } catch (err) {\n      onErr(err.toString());\n    }\n  };\n\n  return (\n    <Dialog\n      visible={show}\n      onDismiss={onDismiss}\n      style={{ backgroundColor: theme.colors.surface }}\n    >\n      <Dialog.Title>Invite a new Admin</Dialog.Title>\n      <Dialog.Content>\n        <TextInput\n          textContentType=\"emailAddress\"\n          autoFocus={true}\n          mode=\"outlined\"\n          onSubmitEditing={handleSubmit}\n          returnKeyType=\"send\"\n          left={<TextInput.Icon name=\"email\" />}\n          error={errors.email && touched.email}\n          label=\"email\"\n          value={values.email}\n          ref={email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n      </Dialog.Content>\n      <Dialog.Actions>\n        <Button style={styles.dialogButton} onPress={onDismiss}>\n          Cancel\n        </Button>\n        <Button\n          mode=\"contained\"\n          style={styles.dialogButton}\n          onPress={handleSubmit}\n        >\n          Invite\n        </Button>\n      </Dialog.Actions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport { Portal, ActivityIndicator, FAB, Snackbar } from \"react-native-paper\";\n\nimport { Store } from \"../../redux\";\nimport { Admin, Culture, OfflineError, Ledger } from \"../../lib\";\nimport { Routes } from \"../../routes\";\n\nimport Cultures from \"./Cultures\";\nimport Admins from \"./Admins\";\nimport styles from \"./styles\";\nimport InviteModal from \"./InviteModal\";\nimport Header from \"../Header\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n  theme: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const { token, route, user, navigation } = props;\n\n  const [cultures, setCultures] = useState<Map<string, number>>(null);\n  const [admins, setAdmins] = useState(null);\n  const [inviteModal, setInviteModal] = React.useState(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [offline, setOffline] = useState(false);\n\n  const [searchQuery, setSearchQuery] = useState(undefined);\n  const [showSearch, setShowSearch] = useState(false);\n\n  useLayoutEffect(() => {\n    const header = Header({\n      title: \"Cultural Awareness\",\n      searchQuery: searchQuery,\n      showSearch: showSearch,\n      onSearchChange: (text: string) => setSearchQuery(text),\n      onSearchStart: () => setShowSearch(true),\n      onCancel: () => setShowSearch(false),\n    });\n\n    navigation.setOptions(header({ navigation }));\n  }, [navigation, showSearch, searchQuery]);\n\n  const fetchCultures = async () => {\n    try {\n      const cultures = await Culture.list();\n      setCultures(cultures);\n    } catch (err) {\n      if (err instanceof OfflineError) {\n        try {\n          const cultures = await Ledger.list();\n          setCultures(cultures);\n          setOffline(true);\n        } catch (err) {\n          setMsg(err.toString());\n        }\n      } else {\n        setMsg(err.toString());\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchCultures();\n  }, []);\n\n  const fetchAdmins = async () => {\n    if (!props.token) {\n      return;\n    }\n\n    try {\n      const admins = user.superUser ? await Admin.list(token) : [user];\n      setAdmins(admins);\n    } catch (err) {\n      setMsg(err.toString());\n    }\n  };\n\n  useEffect(() => {\n    fetchAdmins();\n  }, []);\n\n  const cultureNames = cultures ? [...cultures.entries()] : [];\n\n  if (!token) {\n    return (\n      <View>\n        <Cultures\n          navigation={props.navigation}\n          token={\"\"}\n          cultures={cultureNames}\n          onRefresh={() => fetchCultures()}\n          searchQuery={searchQuery}\n          offline={offline}\n          onMsg={(msg) => setMsg(msg)}\n        />\n        <Portal>\n          <Snackbar\n            visible={msg != \"\"}\n            onDismiss={() => setMsg(\"\")}\n            action={{\n              label: \"Ok\",\n              onPress: () => setMsg(\"\"),\n            }}\n          >\n            {msg}\n          </Snackbar>\n        </Portal>\n      </View>\n    );\n  }\n\n  const onAdd = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"Cultures\") {\n      case \"Cultures\":\n        setCultures(\n          new Map([...cultures.entries(), [\"New Culture\", Date.now()]])\n        );\n        break;\n      case \"Admins\":\n        setInviteModal(true);\n    }\n  };\n\n  if (!admins) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              navigation={navigation}\n              token={token}\n              searchQuery={searchQuery}\n              cultures={cultureNames}\n              onRefresh={() => fetchCultures()}\n              offline={offline}\n              onMsg={(msg) => setMsg(msg)}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Admins\">\n          {() => (\n            <Admins\n              token={token}\n              admins={admins}\n              onRefresh={() => fetchAdmins()}\n              searchQuery={searchQuery}\n              onMsg={(msg) => setMsg(msg)}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <FAB style={styles.fab} icon=\"plus\" onPress={onAdd} />\n      <Portal>\n        <Snackbar\n          visible={msg != \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{\n            label: \"Ok\",\n            onPress: () => setMsg(\"\"),\n          }}\n        >\n          {msg}\n        </Snackbar>\n        <InviteModal\n          show={inviteModal}\n          token={token}\n          onDismiss={() => setInviteModal(false)}\n          onErr={(err: string) => setMsg(err)}\n        />\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n    theme: state.theme,\n  }),\n  null\n)(Home);\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { useRef, useEffect } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  HelperText,\n  Portal,\n  Title,\n} from \"react-native-paper\";\nimport { useFormik } from \"formik\";\n\nimport { GeneralInsight, Culture } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Fields, validator } from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  fab: { position: \"absolute\", alignSelf: \"center\", bottom: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n\n  sourceTypeTitle: { margin: 10 },\n});\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params ? props.route.params.index : 0;\n  const culture = props.route.params\n    ? props.route.params.culture\n    : new Culture(\"Unknown\", [ExampleInsight], new Map(), 0);\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights.get(index[0])[index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(\n    () => props.navigation.setOptions({ title: insight.summary || \"Unknown\" }),\n    []\n  );\n\n  const initialValues: Fields = {\n    cultureName: culture.name,\n    title: category,\n    summary: insight.summary,\n    description: insight.information,\n    source: insight.source.data,\n    sourceType: insight.source.type,\n  };\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: validator(isSpecialized ? \"specialized\" : \"general\"),\n    initialValues: initialValues,\n    onSubmit: (values) => updateCulture(values),\n  });\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = async (values: Fields) => {\n    const {\n      cultureName,\n      title,\n      summary,\n      description,\n      source,\n      sourceType,\n    } = values;\n\n    const newInsight = {\n      summary: summary,\n      information: description,\n      source: {\n        data: source,\n        type: sourceType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      const specialized = culture.specializedInsights.get(key);\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        culture.specializedInsights.delete(key);\n        culture.specializedInsights.set(title, specialized);\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    // set dirty if any changes have been made.\n    const prevName = culture.name;\n    const dirty =\n      category !== title ||\n      summary !== insight.summary ||\n      description !== insight.information ||\n      source !== insight.source.data ||\n      sourceType !== insight.source.type ||\n      cultureName !== prevName;\n\n    culture.name = cultureName;\n\n    props.navigation.navigate(\"Culture\", {\n      cultureName: culture.name,\n      prevName: prevName,\n      dirty: dirty,\n    });\n  };\n\n  // focus the next input\n  const nextInput = (ref: React.MutableRefObject<any>) => {\n    if (!ref) {\n      return;\n    }\n\n    ref.current.focus();\n  };\n\n  const cultureName = useRef();\n  const title = useRef();\n  const summary = useRef();\n  const description = useRef();\n  const source = useRef();\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          style={styles.input}\n          value={values.cultureName}\n          onBlur={handleBlur(\"cultureName\")}\n          onSubmitEditing={() => nextInput(isSpecialized ? title : summary)}\n          ref={cultureName}\n          placeholder=\"Culture Name\"\n          returnKeyType=\"next\"\n          label=\"Culture Name\"\n          mode=\"outlined\"\n          onChangeText={handleChange(\"cultureName\")}\n        />\n        {errors.cultureName && touched.cultureName && (\n          <HelperText type=\"error\">{errors.cultureName}</HelperText>\n        )}\n      </View>\n      {isSpecialized && (\n        <View>\n          <TextInput\n            style={styles.input}\n            value={values.title}\n            placeholder=\"Title\"\n            onSubmitEditing={() => nextInput(summary)}\n            returnKeyType=\"next\"\n            ref={title}\n            label=\"Title\"\n            mode=\"outlined\"\n            onChangeText={handleChange(\"title\")}\n          />\n          {errors.title && touched.title && (\n            <HelperText type=\"error\">{errors.title}</HelperText>\n          )}\n        </View>\n      )}\n      {isSpecialized && <Divider />}\n      <View>\n        <TextInput\n          style={styles.input}\n          value={values.summary}\n          onBlur={handleBlur(\"summary\")}\n          placeholder=\"Summary\"\n          onSubmitEditing={() => nextInput(description)}\n          returnKeyType=\"next\"\n          ref={summary}\n          label=\"Summary\"\n          mode=\"outlined\"\n          onChangeText={handleChange(\"summary\")}\n        />\n        {errors.summary && touched.summary && (\n          <HelperText type=\"error\">{errors.summary}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          style={styles.input}\n          value={values.description}\n          onBlur={handleBlur(\"description\")}\n          placeholder=\"Description\"\n          ref={description}\n          returnKeyType=\"next\"\n          label=\"Description\"\n          mode=\"outlined\"\n          onChangeText={handleChange(\"description\")}\n          multiline={true}\n          numberOfLines={5}\n        />\n        {errors.description && touched.description && (\n          <HelperText type=\"error\">{errors.description}</HelperText>\n        )}\n      </View>\n      <Divider />\n      <Title style={styles.sourceTypeTitle}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={handleChange(\"sourceType\")}\n        value={values.sourceType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <View>\n        <TextInput\n          style={styles.input}\n          value={values.source}\n          onBlur={handleBlur(\"source\")}\n          placeholder=\"Source\"\n          onSubmitEditing={handleSubmit}\n          ref={source}\n          returnKeyType=\"next\"\n          label=\"Source\"\n          mode=\"outlined\"\n          onChangeText={handleChange(\"source\")}\n        />\n        {errors.source && touched.source && (\n          <HelperText type=\"error\">{errors.source}</HelperText>\n        )}\n      </View>\n      <Portal>\n        <FAB style={styles.fab} icon=\"check\" onPress={handleSubmit} />\n      </Portal>\n    </View>\n  );\n}\n","import EditInsight from \"./EditInsight\";\n\nexport default EditInsight;\n","import * as Yup from \"yup\";\n\n/**\n * EditInsight screen fields for Formik.\n */\nexport type Fields = {\n  cultureName: string;\n  title?: string;\n  summary: string;\n  description: string;\n  source: string;\n  sourceType: string;\n};\n\n/**\n * EditInsight Validation Schema, a Yup Schema for basic validation for EditInsight\n * performs basic validation.\n */\nexport function validator(type: \"general\" | \"specialized\"): Yup.ObjectSchema {\n  return Yup.object().shape({\n    cultureName: Yup.string().required(\"Required\"),\n    title: type === \"specialized\" && Yup.string().required(\"Required\"),\n    summary: Yup.string().required(\"Required\"),\n    description: Yup.string().required(\"Required\"),\n    source: Yup.string().required(\"Required\"),\n    sourceType: Yup.string().required(\"Required\"),\n  });\n}\n","import * as Yup from \"yup\";\n\nexport default Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\nimport { Admin } from \"../../lib\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  // focus the next input\n  const nextInput = (ref: React.MutableRefObject<any>): void => {\n    if (!ref) {\n      return;\n    }\n\n    ref.current.focus();\n  };\n\n  return (\n    <View style={styles.view}>\n      <Title style={styles.title}>Let's create a new password!</Title>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          textContentType=\"newPassword\"\n          onSubmitEditing={() => nextInput(passwordConfirmation)}\n          returnKeyType=\"next\"\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          textContentType=\"password\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          onSubmitEditing={handleSubmit}\n          returnKeyType=\"done\"\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import Recovery from \"./Recovery\";\n\nexport default Recovery;\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../../redux\";\nimport { ThemeType } from \"../../theme\";\nimport Storage from \"../../storage\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(Storage.Theme, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => (\n          <IconButton {...props} icon=\"brightness-6\" onPress={handleChange} />\n        )}\n        right={(props) => (\n          <Checkbox\n            onPress={handleChange}\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n\n  input: {\n    padding: 20,\n  },\n\n  characterCounter: {\n    fontSize: 11,\n    right: 22,\n    position: \"absolute\",\n    bottom: 20,\n    paddingRight: 2,\n    paddingBottom: 2,\n  },\n\n  button: {\n    padding: 15,\n    margin: 10,\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../../lib\";\nimport styles from \"./styles\";\n\ndayjs.extend(relativeTime);\n\ntype Props = {\n  // Callback fired when \"Update All\" is pressed.\n  onUpdateFinish: (err: string | null) => void;\n};\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(props: Props): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n      props.onUpdateFinish(null);\n    } catch (err) {\n      props.onUpdateFinish(err.toString());\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      {expanded && (\n        <Button mode=\"contained\" onPress={() => update()}>\n          Update All\n        </Button>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { List, TextInput, Text, Button } from \"react-native-paper\";\n\nimport { Feedback as FeedbackSender } from \"../../lib\";\nimport styles from \"./styles\";\n\nconst characterLimit = 300;\n\ntype state = \"sending\" | \"sent\" | \"failed\" | \"writing\";\n\nexport default function Feedback(): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n  const [state, setState] = useState<state>(\"writing\");\n\n  const handleInput = (text: string) => {\n    if (text.length > characterLimit) {\n      return;\n    }\n\n    setFeedback(text);\n  };\n\n  const sendFeedback = async () => {\n    if (feedback === \"\") {\n      return;\n    }\n\n    setState(\"sending\");\n    try {\n      await FeedbackSender.send(feedback);\n    } catch (err) {\n      setState(\"failed\");\n      return;\n    }\n\n    setState(\"sent\");\n  };\n\n  const reset = () => {\n    setState(\"writing\");\n    setFeedback(\"\");\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        left={(props) => (\n          <List.Icon\n            {...props}\n            style={styles.leftIcon}\n            icon=\"message-reply-text\"\n          />\n        )}\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Feedback\"\n      >\n        {state === \"sent\" && (\n          <Button\n            icon=\"check\"\n            color=\"green\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={reset}\n          >\n            Thank you\n          </Button>\n        )}\n        {state === \"failed\" && (\n          <Button\n            icon=\"alert\"\n            color=\"yellow\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={() => setState(\"writing\")}\n          >\n            Try again later\n          </Button>\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <TextInput\n            style={styles.input}\n            mode=\"outlined\"\n            multiline={true}\n            label=\"How can we improve?\"\n            value={feedback}\n            onSubmitEditing={() => sendFeedback()}\n            returnKeyType=\"send\"\n            onChangeText={handleInput}\n            numberOfLines={4}\n            right={\n              state === \"writing\" ? (\n                <TextInput.Icon name=\"send\" onPress={() => sendFeedback()} />\n              ) : (\n                <TextInput.Icon name=\"check\" />\n              )\n            }\n          />\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <Text\n            style={styles.characterCounter}\n          >{`${feedback.length}/${characterLimit}`}</Text>\n        )}\n      </List.Accordion>\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton, Button } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Routes } from \"../../routes\";\nimport Storage from \"../../storage\";\nimport styles from \"./styles\";\n\ntype Props = {\n  token: string;\n  logout: () => void;\n  email: string;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n};\n\n/**\n * AccountSettings displays Log in/Log out and whether or not to remember the user's email.\n *\n * @param {Props} props\n * @returns {React.ReactElement} React Component\n */\nexport default function AccountSettings(props: Props): React.ReactElement {\n  const { token, email, logout, navigation } = props;\n\n  const [expanded, setExpanded] = useState(false);\n  const [remember, setRemember] = useState(false);\n\n  useEffect(() => {\n    const getEmail = async () => {\n      let email: string;\n      try {\n        email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      } catch (err) {\n        setRemember(false);\n        return;\n      }\n\n      if (email) {\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  const rememberEmail = async () => {\n    switch (remember) {\n      case true:\n        try {\n          await AsyncStorage.removeItem(Storage.RememberedEmail);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(false);\n        break;\n      case false:\n        try {\n          await AsyncStorage.setItem(Storage.RememberedEmail, email);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(true);\n    }\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Account\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"account\" style={styles.leftIcon} />\n        )}\n      >\n        {token !== \"\" && (\n          <List.Item\n            title=\"Remember Email\"\n            onPress={() => rememberEmail()}\n            left={(props) => (\n              <IconButton\n                {...props}\n                icon=\"email\"\n                onPress={() => rememberEmail()}\n              />\n            )}\n            right={(props) => (\n              <Checkbox\n                onPress={() => rememberEmail()}\n                {...props}\n                status={remember ? \"checked\" : \"unchecked\"}\n              />\n            )}\n          />\n        )}\n      </List.Accordion>\n      {expanded && (\n        <View>\n          {!token ? (\n            <Button\n              icon=\"login\"\n              mode=\"contained\"\n              onPress={() => {\n                navigation.navigate(\"Login\");\n              }}\n            >\n              Log In\n            </Button>\n          ) : (\n            <Button\n              icon=\"logout\"\n              mode=\"contained\"\n              onPress={() => {\n                logout();\n                navigation.navigate(\"Home\");\n              }}\n            >\n              Log Out\n            </Button>\n          )}\n        </View>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Linking } from \"react-native\";\n\nimport {\n  Divider,\n  List,\n  IconButton,\n  Snackbar,\n  Portal,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { disclaimerURL } from \"../../constants\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport Feedback from \"./Feedback\";\nimport AccountSettings from \"./AccountSettings\";\nimport styles from \"./styles\";\n\ntype Props = {\n  resetUser: () => void;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n  token: string;\n  email: string;\n};\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nfunction Settings(props: Props): React.ReactElement {\n  const { token, email, resetUser, navigation } = props;\n\n  const openLink = () => Linking.openURL(disclaimerURL);\n  const [msg, setMsg] = useState(\"\");\n\n  return (\n    <ScrollView>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={openLink}\n        left={(props) => (\n          <IconButton\n            {...props}\n            style={styles.leftIcon}\n            onPress={openLink}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton\n            {...props}\n            icon=\"eye\"\n            style={styles.rightIcon}\n            onPress={openLink}\n          />\n        )}\n      />\n      <Divider />\n      <AccountSettings\n        email={email}\n        navigation={navigation}\n        token={token}\n        logout={resetUser}\n      />\n      <Divider />\n      <Feedback />\n      <Divider />\n      <DownloadedCultures\n        onUpdateFinish={(err) => setMsg(err || \"Update finished\")}\n      />\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </ScrollView>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Settings\">;\n    }\n  ) => ({\n    token: state.user.token,\n    email: state.user.user.email,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(Settings);\n","import Settings from \"./Settings\";\n\nexport default Settings;\n","import { Culture } from \"./lib\";\n\n/**\n * React Navigation Routes, for Mobile.\n *\n * Add type definitions and parameters for routes in {@link StackNavigator}\n */\nexport type Routes = {\n  /**\n   * Displays information about a culture, looking up information about that\n   * culture by provided prop {@link cultureName}.\n   *\n   * For admins it allows editing and adding information about a particular culture.\n   */\n  Culture: { cultureName: string; prevName?: string; dirty?: boolean };\n\n  /**\n   * Displays an interface to edit a {@link Culture} {@link GeneralInsight}\n   * and {@link SpecializedInsight}\n   *\n   * Admin **ONLY** route\n   */\n  EditInsight: { culture: Culture; index: number | [string, number] };\n\n  /**\n   * Displays Cultures allowing for downloads and seeing information\n   * about that culture and Admins.\n   *\n   * To see Admins must be logged in, to see others you need to\n   * be a superUser.\n   *\n   * Cultures can be deleted and edited.\n   */\n  Home: undefined;\n\n  /**\n   * Allows creation of a new admin account.\n   *\n   * @remark Route sent via email.\n   */\n  Register: { token: string };\n\n  /**\n   * Allows admin Login, Account recovery, and remembering the user's\n   * email between logins.\n   */\n  Login: undefined;\n\n  /**\n   * Allows Admin account recovery, requires the token and updates the Admin\n   * in the Api in order to update their password.\n   */\n  Recovery: { token: string; email: string };\n\n  /**\n   * Settings page displays downloaded cultures, dark theme, and disclaimer\n   * for application.\n   */\n  Settings: undefined;\n};\n\n/**\n * React Navigation links {@link Routes} to Web URLs.\n */\nexport const Linking = {\n  prefixes: [\"/\"],\n  config: {\n    screens: {\n      Home: \"/\",\n      Login: \"login\",\n      Register: \"register/:token\",\n      Recovery: \"recovery/:email/:token\",\n      Culture: {\n        path: \"culture/:cultureName\",\n        parse: {\n          cultureName: (cultureName: string): string => decodeURI(cultureName),\n        },\n        screens: {\n          general: \"general\",\n          specialized: \"specialized\",\n        },\n      },\n      EditInsight: \"culture/edit/:culture/:index\",\n      Settings: \"settings\",\n    },\n  },\n};\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  Culture,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n} from \"./views\";\n\nimport { Routes, Linking } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\nimport Storage from \"./storage\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n\n  return (\n    <NavigationContainer\n      linking={Linking}\n      theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n    >\n      <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n        <StatusBar style={theme === \"Dark\" ? \"light\" : \"dark\"} />\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen\n            name=\"Culture\"\n            component={Culture}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Login\"\n            component={Login}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Register\"\n            component={Register}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"EditInsight\"\n            component={EditInsight}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Settings\"\n            component={Settings}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Recovery\"\n            component={Recovery}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n        </Stack.Navigator>\n      </PaperProvider>\n    </NavigationContainer>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}