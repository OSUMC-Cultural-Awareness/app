{"version":3,"sources":["src/views/Culture/style.ts","src/views/Culture/InsightCard.tsx","src/views/Culture/Insights.tsx","src/views/Culture/ToolsFAB.tsx","src/views/Header.tsx","src/lib/api.ts","src/storage.ts","src/lib/ledger.ts","src/lib/feedback.ts","src/lib/admin.ts","src/lib/culture.ts","src/views/Culture/Culture.tsx","src/views/Culture/index.ts","src/redux/UserReducer.ts","src/redux/UserAction.ts","src/redux/ThemeAction.ts","src/redux/index.ts","src/redux/ThemeReducer.ts","src/views/Login/validation.ts","src/views/Login/Login.tsx","src/views/Login/index.ts","src/views/Register/explanationText.ts","src/views/Register/validation.ts","src/views/Register/Register.tsx","src/views/Register/index.ts","src/constants.ts","src/theme.ts","src/views/Home/styles.ts","src/views/Home/Cultures.tsx","src/views/Home/validation.ts","src/views/Home/Admins.tsx","src/views/Home/Home.tsx","src/views/Home/index.ts","src/views/EditInsight/EditInsight.tsx","src/views/EditInsight/index.ts","src/views/Recovery/validation.ts","src/views/Recovery/Recovery.tsx","src/views/Recovery/index.ts","src/views/Settings/ThemeToggler.tsx","src/views/Settings/styles.ts","src/views/Settings/DownloadedCultures.tsx","src/views/Settings/Feedback.tsx","src/views/Settings/AccountSettings.tsx","src/views/Settings/Settings.tsx","src/views/Settings/index.ts","src/routes.ts","src/index.tsx"],"names":["StyleSheet","create","spinner","top","position","specialAddInsight","padding","marginVertical","marginHorizontal","view","flex","card","fab","Platform","OS","undefined","InsightCard","props","insight","index","editing","onPress","onAction","link","source","data","Card","style","styles","Content","Title","summary","Paragraph","information","Actions","Linking","canOpenURL","IconButton","icon","size","Clipboard","setString","type","openURL","onDelete","Insights","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","refresh","SafeAreaView","FlatList","keyExtractor","_","toString","ToolsFAB","open","setOpen","FAB","Group","visible","actions","onAdd","onSave","onStateChange","flexDirection","innerView","justifyContent","ripple","marginRight","searchView","marginEnd","title","fontWeight","HeaderButton","connect","state","ownProps","name","user","navigation","showSearch","onSearchStart","onCancel","View","navigate","TouchableRipple","Text","label","Header","searchQuery","onSearchChange","searchBarStyles","height","headerTitle","Searchbar","autoFocus","placeholder","onChangeText","value","headerRight","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","API_URL","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","Admin","email","superUser","getAuth","password","post","put","passwordConfirmation","password_confirmation","res","delete","Culture","generalInsights","specializedInsights","modified","this","general_insights","specialized_insights","previousName","specializedInsightsObj","forEach","val","key","culture","get","Map","Object","entries","map","Storage","list","a","async","AsyncStorage","getItem","Ledger","ledger","parse","saveLedger","cultures","setItem","add","info","compressed","Pako","to","set","updatedCultures","has","storedData","removeItem","Feedback","feedback","Tab","createMaterialTopTabNavigator","ExampleInsight","route","cultureName","params","setCulture","setEditing","msg","setMsg","banner","setBanner","dirty","setDirty","setSearchQuery","setShowSearch","useRoute","useLayoutEffect","header","text","setOptions","useEffect","fetchCulture","React","addListener","e","preventDefault","confirm","dispatch","action","Alert","alert","cancelable","setCultureInPlace","newCulture","read","console","error","Date","now","hideSnackbar","onCardAction","specialized","query","deleteInsight","Array","i","splice","length","InsightCardView","generalResults","filter","content","toLowerCase","includes","generalInsightResults","specializedResults","from","category","q","Banner","Navigator","initialRouteName","Screen","row","item","Accordion","id","Button","mode","update","prevName","setParams","getFocusedRouteNameFromRoute","push","Portal","Snackbar","onDismiss","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","Yup","shape","required","initialValues","margin","overflow","recover","bottom","Login","bindActionCreators","remember","setRemember","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","Validation","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","RememberedEmail","getEmail","fields","CommonActions","reset","routes","TextInput","textContentType","left","Icon","ref","onBlur","HelperText","secureTextEntry","right","Checkbox","Item","uppercase","min","max","matches","oneOf","color","Register","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","RegisterHelpText","onFocus","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","modalLight","backgroundColor","background","modalDark","div","deleteButton","Cultures","offline","nameLower","deleteCulture","EmailValidation","EmailNameValidation","admins","deleteModal","setDeleteModal","editModal","setEditModal","selectedItem","setSelectedItem","onEdit","admin","superUserDeleteCheck","Modal","contentContainerStyle","disabled","Home","setCultures","setAdmins","inviteModal","setInviteModal","setOffline","invite","fetchCultures","fetchAdmins","field","input","paddingHorizontal","EditInsight","isSpecialized","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","setCultureName","Divider","numberOfLines","multiline","RadioButton","onValueChange","newInsight","alignSelf","Recovery","updateAccount","updatePassword","Theme","getTheme","newTheme","log","rightIcon","leftIcon","characterCounter","fontSize","paddingRight","paddingBottom","button","DownloadedCultures","expanded","setExpanded","setLedger","fetchLedger","timer","setInterval","clearInterval","ledgerArray","description","dayjs","unix","remove","onUpdateFinish","extend","relativeTime","setFeedback","setState","FeedbackSender","send","AccountSettings","logout","rememberEmail","Settings","openLink","ScrollView","err","prefixes","config","screens","path","decodeURI","general","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","StatusBar","component","options","headerTitleAlign","headerBackTitleVisible","registerRootComponent"],"mappings":"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","file":"static/js/app.dd0b8e5a.chunk.js","sourcesContent":["import { StyleSheet, Platform } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  view: {\n    flex: 1,\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  fab: { position: (Platform.OS === \"web\" ? \"fixed\" : undefined) as any },\n});\n","import React from \"react\";\n\n// Clipboard is deprecated, but necessary because of incompatibility with Expo\n// See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\nimport { Linking, Clipboard } from \"react-native\";\n\nimport { Card, IconButton, Paragraph, Title } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\nexport type Action =\n  | \"copy\"\n  | { type: \"open\"; link: string }\n  | { type: \"delete\"; summary: string };\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n  // callback when an action is performed on an insight\n  //\n  // includes: Copying, Deleting, and Opening\n  onAction: (action: Action) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function InsightCard(\n  props: InsightCardProps\n): React.ReactElement {\n  const { insight, index, editing, onPress, onAction } = props;\n  const link = insight.source.data;\n\n  return (\n    <Card style={styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"link\"\n            size={20}\n            onPress={() => {\n              onAction(\"copy\");\n              Clipboard.setString(link);\n            }}\n          />\n        )}\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"login-variant\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"open\", link: link });\n              Linking.openURL(link);\n            }}\n          />\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"delete\", summary: insight.summary });\n              props.onDelete(index);\n            }}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, SafeAreaView } from \"react-native\";\n\nimport { ActivityIndicator } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport styles from \"./style\";\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: [string, GeneralInsight[]][] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    setRefreshing(true);\n    onRefresh();\n    setRefreshing(false);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { FAB } from \"react-native-paper\";\nimport styles from \"./style\";\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      open={open}\n      style={styles.fab}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n","import React from \"react\";\nimport { View, StyleSheet, Platform } from \"react-native\";\n\nimport {\n  IconButton,\n  Avatar,\n  TouchableRipple,\n  Searchbar,\n  Title,\n} from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\n\nimport { Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype RightHeaderButtonProps = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n  showSearch: boolean;\n  onSearchStart: () => void;\n  onCancel: () => void;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, flexDirection: \"row\" },\n\n  innerView: { justifyContent: \"center\" },\n\n  ripple: { marginRight: 15 },\n\n  searchView: { marginEnd: 25 },\n\n  title: { fontWeight: \"600\" },\n});\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {RightHeaderButtonProps} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: RightHeaderButtonProps): React.ReactElement {\n  const { name, showSearch, navigation, onSearchStart, onCancel } = props;\n\n  return (\n    <View style={styles.view}>\n      <View style={styles.innerView}>\n        {showSearch ? (\n          <IconButton icon=\"cancel\" onPress={onCancel} />\n        ) : (\n          <IconButton icon=\"magnify\" onPress={onSearchStart} />\n        )}\n      </View>\n      <View style={styles.innerView}>\n        {name === \"\" ? (\n          <IconButton\n            icon=\"dots-vertical\"\n            onPress={() => navigation.navigate(\"Settings\")}\n          />\n        ) : (\n          <TouchableRipple\n            style={styles.ripple}\n            onPress={() => navigation.navigate(\"Settings\")}\n          >\n            <Avatar.Text size={32} label={name[0]} />\n          </TouchableRipple>\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  null\n)(RightHeaderButton);\n\ntype Props = {\n  title: string;\n  searchQuery?: string;\n  onSearchChange: (text: string) => void;\n  onSearchStart: () => void;\n  showSearch: boolean;\n  onCancel: () => void;\n};\n\nexport default function Header(props: Props) {\n  const {\n    title,\n    showSearch,\n    searchQuery,\n    onSearchChange,\n    onSearchStart,\n    onCancel,\n  } = props;\n\n  let searchBarStyles = {};\n  if (Platform.OS === \"ios\") {\n    searchBarStyles = { height: 30 };\n  }\n\n  return ({ navigation }) => ({\n    headerTitle: () => (\n      <View style={styles.searchView}>\n        {showSearch ? (\n          <Searchbar\n            autoFocus={true}\n            placeholder=\"search\"\n            style={searchBarStyles}\n            onChangeText={onSearchChange}\n            value={searchQuery}\n          />\n        ) : (\n          <Title style={styles.title}>{title}</Title>\n        )}\n      </View>\n    ),\n    headerRight: () => (\n      <HeaderButton\n        navigation={navigation}\n        onSearchStart={onSearchStart}\n        showSearch={showSearch}\n        onCancel={onCancel}\n      />\n    ),\n  });\n}\n","import { API_URL } from \"../../env.json\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","// Locations to store information in {@link AsyncStorage}.\nexport namespace Storage {\n  // Location to store a user's email locally on user's device.\n  export const RememberedEmail = \"@rememberedEmail\";\n\n  // Location to store theme \"Light\" or \"Dark\" on user's device.\n  export const Theme = \"@theme\";\n\n  // Location to store ledger on user's device\n  export const Ledger = \"@ledger\";\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\nimport { Storage } from \"../storage\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(async (modified: number, name: string) => {\n      if (cultures.has(name) && cultures.get(name) < modified) {\n        add(name);\n      }\n    });\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(Storage.Ledger);\n    if (!data) {\n      return new Map();\n    }\n\n    let ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    if (!storedData) {\n      throw new Error(`${culture}: culture download not found`);\n    }\n\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  function saveLedger(cultures: Map<string, number>) {\n    let ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(Storage.Ledger, JSON.stringify(ledger));\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    let cultures = await list();\n    cultures.set(culture, info.modified);\n    saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    let cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    saveLedger(cultures);\n  }\n}\n","import { Api } from \"./api\";\n\nexport namespace Feedback {\n  /**\n   * send feedback to owner.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} feedback - to send\n   * @returns {Promise<void>}\n   */\n  export async function send(feedback: string): Promise<void> {\n    await Api.post(\"/feedback\", { feedback: feedback });\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin account\n   * @param {string} name - updated name\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async update(\n    email: string,\n    name: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(`/admins/${email}`, { name }, token);\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(culture: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${culture}`);\n\n    const { name, general_insights, specialized_insights, modified } = json;\n\n    return new this(\n      name,\n      general_insights,\n      new Map(Object.entries(specialized_insights)),\n      modified\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  static async list(): Promise<Map<string, number>> {\n    const json = await Api.get(\"/cultures\");\n    const data: { name: string; modified: number }[] = json[\"cultures\"];\n\n    return new Map(data.map((culture) => [culture.name, culture.modified]));\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @param {string} previousName - the previous name of the Culture\n   * @returns {Promise<void>}\n   */\n  async update(token: string, previousName?: string): Promise<void> {\n    let specializedInsightsObj = {};\n    this.specializedInsights.forEach(\n      (val, key) => (specializedInsightsObj[key] = val)\n    );\n\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: specializedInsightsObj,\n      name: this.name,\n    };\n\n    await Api.put(\n      `/cultures/${previousName ? previousName : this.name}`,\n      data,\n      token\n    );\n  }\n}\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { View, Alert, Platform } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  ActivityIndicator,\n  List,\n  Button,\n  Snackbar,\n  Portal,\n  Banner,\n  FAB,\n} from \"react-native-paper\";\n\nimport InsightCard, { Action } from \"./InsightCard\";\nimport Insights from \"./Insights\";\nimport ToolsFAB from \"./ToolsFAB\";\nimport Header from \"../Header\";\nimport styles from \"./style\";\n\nimport { Culture, GeneralInsight, SpecializedInsight, Ledger } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  general: { insights: GeneralInsight[] };\n  specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\nconst adminNewCultureBanner = `Welcome to a brand new Culture!\n\n1. To add a new insight hit the tool button\n2. To edit an insight click on it\n3. Don't forget to save!\n`;\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n  const navigation = props.navigation;\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [banner, setBanner] = useState(false);\n  const [dirty, setDirty] = useState(props.route.params.dirty || false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSearch, setShowSearch] = useState(false);\n  const route = useRoute();\n\n  useLayoutEffect(() => {\n    const header = Header({\n      title: cultureName,\n      searchQuery: searchQuery,\n      showSearch: showSearch,\n      onSearchChange: (text: string) => setSearchQuery(text),\n      onSearchStart: () => setShowSearch(true),\n      onCancel: () => setShowSearch(false),\n    });\n\n    navigation.setOptions(header({ navigation }));\n  }, [navigation, showSearch, searchQuery, cultureName]);\n\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  // Prevent leaving with unsaved changes\n  React.useEffect(\n    () =>\n      navigation.addListener(\"beforeRemove\", (e) => {\n        const unsaved = dirty || props.route.params.dirty;\n\n        if (!unsaved) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (Platform.OS === \"web\") {\n          // @ts-ignore\n          const leave = confirm(\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\"\n          );\n\n          if (leave) {\n            navigation.dispatch(e.data.action);\n          }\n        } else {\n          Alert.alert(\n            \"Discard changes?\",\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\",\n            [\n              { text: \"Don't leave\", style: \"cancel\", onPress: () => {} },\n              {\n                text: \"Discard\",\n                style: \"destructive\",\n                onPress: () => navigation.dispatch(e.data.action),\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n      }),\n    [navigation, dirty, props.route.params.dirty]\n  );\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setDirty(true);\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        if (!token) {\n          // TODO: Display Magical Unicorn Culture\n          props.navigation.navigate(\"Home\");\n        } else {\n          setBanner(true);\n          setEditing(true);\n          setCulture(new Culture(cultureName, [], new Map(), Date.now()));\n        }\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token, props.route.params.prevName);\n      setCultureInPlace(culture);\n      setDirty(false);\n      navigation.setParams({\n        cultureName: cultureName,\n        dirty: false,\n        prevName: props.route.params.prevName,\n      });\n    } catch (err) {\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setMsg(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onCardAction = (action: Action) => {\n    if (action === \"copy\") {\n      setMsg(\"Link copied!\");\n      return;\n    }\n\n    switch (action.type) {\n      case \"open\":\n        setMsg(`Opening ${action.link}`);\n        break;\n      case \"delete\":\n        setMsg(`Deleting ${action.summary}`);\n    }\n  };\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      const val = culture.specializedInsights.get(key);\n      val.splice(i, 1);\n\n      culture.specializedInsights.set(key, val);\n\n      if (val.length === 0) {\n        culture.specializedInsights.delete(key);\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"general\") {\n      case \"general\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"specialized\":\n        culture.specializedInsights.set(\"Specialized Insight\", [\n          ExampleInsight,\n        ]);\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights.set(key, [\n      ...culture.specializedInsights.get(key),\n      ExampleInsight,\n    ]);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onAction={onCardAction}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  const generalResults = generalInsightResults(\n    culture.generalInsights,\n    searchQuery\n  );\n\n  const specializedResults = specializedInsightResults(\n    culture.specializedInsights,\n    searchQuery\n  );\n\n  return (\n    <View style={styles.view}>\n      {token !== \"\" && (\n        <Banner\n          icon=\"alert\"\n          visible={banner}\n          actions={[{ label: \"Ok\", onPress: () => setBanner(false) }]}\n        >\n          {adminNewCultureBanner}\n        </Banner>\n      )}\n      <Tab.Navigator initialRouteName=\"general\">\n        <Tab.Screen name=\"general\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              insights={generalResults}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"specialized\">\n          {() => (\n            <Insights\n              insights={specializedResults}\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              renderItem={(row: {\n                item: [string, GeneralInsight[]];\n                index: number;\n              }) => {\n                const [title, insights] = row.item;\n                return (\n                  <List.Accordion title={title} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [title, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(title)}\n                        mode=\"contained\"\n                        style={styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      {token !== \"\" && editing && (\n        <ToolsFAB onSave={() => updateCulture()} onAdd={addInsightOrCategory} />\n      )}\n      {token !== \"\" && !editing && (\n        <FAB.Group\n          icon=\"pencil\"\n          style={styles.fab}\n          open={false}\n          onPress={() => setEditing(!editing)}\n          visible={true}\n          actions={[]}\n          onStateChange={() => setEditing(!editing)}\n        />\n      )}\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\n/**\n * Filers generalInsights based on search query.\n *\n * @param {GeneralInsight[]} insights\n * @param {string} search query\n *\n * @returns filtered general insights\n */\nfunction generalInsightResults(\n  insights: GeneralInsight[],\n  searchQuery: string\n): GeneralInsight[] {\n  return insights.filter((insight) => {\n    if (!searchQuery) {\n      return true;\n    }\n\n    const content = (insight.summary + insight.information).toLowerCase();\n    const query = searchQuery.toLowerCase();\n\n    return content.includes(query);\n  });\n}\n\n/**\n * Filters specializedInsights based on search query.\n *\n * @param {Map<string, GeneralInsight[]>} Specialized Insights\n * @param {string} query\n *\n * @returns {[string, GeneralInsight[]][]} filtered specialized insights\n */\nfunction specializedInsightResults(\n  specialized: Map<string, GeneralInsight[]>,\n  query: string\n): [string, GeneralInsight[]][] {\n  const specArray = Array.from(specialized.entries());\n  const matched: [string, GeneralInsight[]][] = specArray.map(\n    ([category, insights]) => {\n      if (!query) {\n        return [category, insights];\n      }\n\n      const filtered: GeneralInsight[] = insights.filter((insight) => {\n        if (!query) {\n          return true;\n        }\n        const content = (insight.summary + insight.information).toLowerCase();\n        const q = query.toLowerCase();\n\n        return content.includes(q);\n      });\n\n      return [category, filtered];\n    }\n  );\n\n  return matched.filter(([_, insights]) => insights.length !== 0);\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import Culture from \"./Culture\";\n\nexport default Culture;\n","import { Admin } from \"../lib\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = () => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (theme: Store[\"theme\"]) => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import * as Yup from \"yup\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login\n * performs basic validation.\n */\nexport default Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport Validation from \"./validation\";\nimport { Storage } from \"../../storage\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(Storage.RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(Storage.RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      try {\n        await Admin.recover(values.email);\n        setMsg(`Sent email to ${values.email}`);\n      } catch (err) {\n        console.error(\"Failed to send recovery email: \", err);\n        setMsg(err.toString());\n      }\n    } else {\n      setMsg(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from \"./Login\";\n\nexport default Login;\n","/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport default {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need this if you ever forget your password.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check that you know the password.\",\n};\n","import * as Yup from \"yup\";\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport default Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { TermsOfServiceURL } from \"../../constants\";\n\nimport RegisterHelpText from \"./explanationText\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [msg, setMsg] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import Register from \"./Register\";\n\nexport default Register;\n","export const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n","import { StyleSheet, Platform } from \"react-native\";\n\nimport { darkTheme, lightTheme } from \"../../theme\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  view: {\n    flex: 1,\n  },\n\n  modalLight: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: lightTheme.colors.background,\n  },\n\n  modalDark: {\n    margin: 40,\n    padding: 40,\n    backgroundColor: darkTheme.colors.background,\n  },\n\n  list: {\n    flex: 1,\n  },\n\n  div: {\n    margin: \"5px\",\n  },\n\n  deleteButton: {\n    backgroundColor: \"red\",\n  },\n\n  fab: {\n    position: (Platform.OS === \"web\" ? \"fixed\" : \"absolute\") as any,\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import React, { useState } from \"react\";\nimport { View, FlatList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { ActivityIndicator, List, IconButton } from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\n\nimport { Culture, Ledger } from \"../../lib\";\n\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n  cultures: IterableIterator<[string, number]>;\n  onRefresh: () => void;\n  searchQuery?: string;\n  offline: boolean;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Cultures(props: CultureProps): React.ReactElement {\n  const { cultures, onRefresh, token, searchQuery, offline } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const deleteCulture = async (name: string) => {\n    try {\n      await Culture.delete(name, token);\n    } catch (err) {\n      console.error(\"Failed to delete culture\", err);\n    }\n    onRefresh();\n  };\n\n  const searchResults = (): [string, number][] => {\n    return Array.from(cultures).filter((culture) => {\n      const [name] = culture;\n      if (!searchQuery) {\n        return true;\n      }\n\n      const nameLower = name.toLowerCase();\n      const query = searchQuery.toLowerCase();\n\n      return nameLower.includes(query);\n    });\n  };\n\n  return (\n    <View>\n      <FlatList\n        data={searchResults()}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => {\n          setRefreshing(true);\n          onRefresh();\n          setRefreshing(false);\n        }}\n        refreshing={refreshing}\n        renderItem={({ item }) => {\n          const [name] = item;\n          return (\n            <List.Item\n              title={name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  {!offline && (\n                    <IconButton\n                      icon=\"download\"\n                      onPress={() => Ledger.add(name)}\n                    />\n                  )}\n                  {token !== \"\" && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => deleteCulture(name)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import * as Yup from \"yup\";\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n});\n\n/**\n * Invite Email Validation Schema, a Yup Schema for basic validation\n */\nexport const EmailNameValidation = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  name: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useLayoutEffect } from \"react\";\nimport { FlatList, Alert, View, Platform } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\nimport {\n  List,\n  IconButton,\n  Modal,\n  Portal,\n  Text,\n  Button,\n  TextInput,\n  Snackbar,\n} from \"react-native-paper\";\nimport { useFormik } from \"formik\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\nimport { Admin } from \"../../lib\";\n\nimport Header from \"../Header\";\nimport styles from \"./styles\";\nimport { EmailNameValidation } from \"./validation\";\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype EditFields = {\n  email: string;\n  name: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: EditFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  name: \"\",\n};\n\n/**\n * Properties for {@link Admins}\n */\ntype AdminProps = {\n  token: string;\n  admins: Admin[];\n  theme: string;\n  user: Admin;\n  onRefresh: () => void;\n  searchQuery?: string;\n};\n\n/**\n * Component that displays a list of components of {@link Admin}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Admins(props: AdminProps): React.ReactElement {\n  const { user, theme, token, admins, onRefresh, searchQuery } = props;\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [msg, setMsg] = useState<string>(\"\");\n\n  const name = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n  } = useFormik({\n    validationSchema: EmailNameValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => onEdit(values),\n  });\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onDelete = async () => {\n    try {\n      await Admin.delete(selectedItem.email, token);\n    } catch {\n      // show error message\n    }\n    onRefresh();\n  };\n\n  const onEdit = async (fields: EditFields) => {\n    const { name, email } = fields;\n    try {\n      Admin.update(email, name, props.token);\n      setEditModal(false);\n      onRefresh();\n    } catch {\n      // TODO: show error message\n    }\n  };\n\n  const superUserDeleteCheck = (item: any) => {\n    if (!item.superUser && item.email != user.email)\n      return (\n        <IconButton\n          icon=\"delete\"\n          onPress={() => {\n            setDeleteModal(true);\n            setSelectedItem(item);\n          }}\n        />\n      );\n  };\n\n  const handleEditClick = (admin: Admin) => {\n    setFieldValue(\"name\", admin.name);\n    setFieldValue(\"email\", admin.email);\n    setEditModal(true);\n  };\n\n  const searchResults = (): Admin[] => {\n    return admins.filter((admin) => {\n      if (!searchQuery) {\n        return true;\n      }\n\n      const name = admin.email.toLowerCase();\n      const query = searchQuery.toLowerCase();\n\n      return name.includes(query);\n    });\n  };\n\n  return (\n    <FlatList\n      style={{ flex: 1 }}\n      data={searchResults()}\n      keyExtractor={(_, index) => index.toString()}\n      renderItem={({ item }) => {\n        return (\n          <View>\n            <List.Item\n              title={item.email}\n              right={() =>\n                props.token !== \"\" && (\n                  <View style={{ flexDirection: \"row\" }}>\n                    <IconButton\n                      icon=\"pencil\"\n                      onPress={() => handleEditClick(item)}\n                    />\n                    {superUserDeleteCheck(item)}\n                  </View>\n                )\n              }\n            />\n            <Portal>\n              {deleteModal && (\n                <Modal\n                  visible={deleteModal}\n                  contentContainerStyle={\n                    theme === \"Dark\" ? styles.modalDark : styles.modalLight\n                  }\n                  onDismiss={() => setDeleteModal(false)}\n                >\n                  {/*TODO: update style for text */}\n                  <Text>\n                    Are you sure you want to delete {selectedItem.email}?\n                  </Text>\n                  <Button\n                    mode=\"contained\"\n                    onPress={() => {\n                      onDelete();\n                      setDeleteModal(false);\n                    }}\n                    style={styles.deleteButton}\n                  >\n                    Delete\n                  </Button>\n                </Modal>\n              )}\n            </Portal>\n            <Portal>\n              {editModal && (\n                <Modal\n                  visible={editModal}\n                  contentContainerStyle={\n                    theme === \"Dark\" ? styles.modalDark : styles.modalLight\n                  }\n                  onDismiss={() => setEditModal(false)}\n                >\n                  {/*TODO: update style for text */}\n                  <Text>Edit admin Account</Text>\n                  <TextInput\n                    mode=\"outlined\"\n                    left={<TextInput.Icon name=\"email\" />}\n                    label=\"email\"\n                    value={values.email}\n                    disabled={true}\n                  />\n                  <TextInput\n                    autoFocus={true}\n                    textContentType=\"name\"\n                    mode=\"outlined\"\n                    left={<TextInput.Icon name=\"account-badge\" />}\n                    error={errors.name && touched.name}\n                    label=\"name\"\n                    value={values.name}\n                    ref={name}\n                    onBlur={handleBlur(\"name\")}\n                    onChangeText={handleChange(\"name\")}\n                  />\n                  <View style={styles.div} />\n                  <Button mode=\"contained\" onPress={handleSubmit}>\n                    Save\n                  </Button>\n                </Modal>\n              )}\n            </Portal>\n            <Portal>\n              <Snackbar\n                visible={msg !== \"\"}\n                onDismiss={hideSnackbar}\n                action={{\n                  label: \"Ok\",\n                  onPress: hideSnackbar,\n                }}\n              >\n                {msg}\n              </Snackbar>\n            </Portal>\n          </View>\n        );\n      }}\n    />\n  );\n}\n\nexport default connect(\n  (state: Store) => ({\n    user: state.user.user,\n    theme: state.theme,\n  }),\n  null\n)(Admins);\n","import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport {\n  Portal,\n  Modal,\n  Text,\n  ActivityIndicator,\n  TextInput,\n  Button,\n  FAB,\n  Snackbar,\n} from \"react-native-paper\";\nimport { useFormik } from \"formik\";\n\nimport { Store } from \"../../redux\";\nimport { Admin, Culture, OfflineError, Ledger } from \"../../lib\";\nimport { Routes } from \"../../routes\";\n\nimport Cultures from \"./Cultures\";\nimport Admins from \"./Admins\";\nimport styles from \"./styles\";\nimport Header from \"../Header\";\nimport { EmailValidation } from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n  theme: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\n/**\n * Invite Email screen fields for Formik.\n */\ntype EmailField = {\n  email: string;\n};\n\n/**\n * Initial values for email field for Formik.\n */\nconst initialValues: EmailField = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const { token, route, navigation, user, theme } = props;\n\n  const [cultures, setCultures] = useState<Map<string, number>>(null);\n  const [admins, setAdmins] = useState(null);\n  const [inviteModal, setInviteModal] = React.useState(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [offline, setOffline] = useState(false);\n\n  const [searchQuery, setSearchQuery] = useState(undefined);\n  const [showSearch, setShowSearch] = useState(false);\n\n  useLayoutEffect(() => {\n    const header = Header({\n      title: \"Cultural Awareness\",\n      searchQuery: searchQuery,\n      showSearch: showSearch,\n      onSearchChange: (text: string) => setSearchQuery(text),\n      onSearchStart: () => setShowSearch(true),\n      onCancel: () => setShowSearch(false),\n    });\n\n    navigation.setOptions(header({ navigation }));\n  }, [navigation, showSearch, searchQuery]);\n\n  const email = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    validateField,\n  } = useFormik({\n    validationSchema: EmailValidation,\n    initialValues: initialValues,\n    onSubmit: (values) => invite(values),\n  });\n\n  const fetchCultures = async () => {\n    try {\n      const cultures = await Culture.list();\n      setCultures(cultures);\n    } catch (err) {\n      if (err instanceof OfflineError) {\n        try {\n          const cultures = await Ledger.list();\n          setCultures(cultures);\n          setOffline(true);\n        } catch (err) {\n          setMsg(err.toString());\n        }\n      } else {\n        setMsg(err.toString());\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchCultures();\n  }, []);\n\n  const fetchAdmins = async () => {\n    if (!props.token) {\n      return;\n    }\n\n    try {\n      const admins = user.superUser ? await Admin.list(token) : [user];\n      setAdmins(admins);\n    } catch (err) {\n      setMsg(err.toString());\n    }\n  };\n\n  useEffect(() => {\n    fetchAdmins();\n  }, []);\n\n  if (!token) {\n    return (\n      <Cultures\n        navigation={props.navigation}\n        token={\"\"}\n        cultures={cultures?.entries()}\n        onRefresh={() => fetchCultures()}\n        searchQuery={searchQuery}\n        offline={offline}\n      />\n    );\n  }\n\n  const onAdd = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"Cultures\") {\n      case \"Cultures\":\n        setCultures(\n          new Map([...cultures.entries(), [\"New Culture\", Date.now()]])\n        );\n        break;\n      case \"Admins\":\n        setInviteModal(true);\n    }\n  };\n\n  const invite = async (field: EmailField) => {\n    const { email } = field;\n    await validateField(\"email\");\n    try {\n      await Admin.invite(email, token);\n      setInviteModal(false);\n    } catch (err) {\n      setMsg(err.toString());\n    }\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  if (!admins) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              navigation={navigation}\n              token={token}\n              searchQuery={searchQuery}\n              cultures={cultures?.entries()}\n              onRefresh={() => fetchCultures()}\n              offline={offline}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Admins\">\n          {() => (\n            <Admins\n              token={token}\n              admins={admins}\n              onRefresh={() => fetchAdmins()}\n              searchQuery={searchQuery}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <FAB style={styles.fab} icon=\"plus\" onPress={onAdd} />\n      <Portal>\n        <Snackbar\n          visible={msg != \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{\n            label: \"Undo\",\n            onPress: () => setMsg(\"\"),\n          }}\n        >\n          {msg}\n        </Snackbar>\n        <Modal\n          visible={inviteModal}\n          contentContainerStyle={\n            theme === \"Dark\" ? styles.modalDark : styles.modalLight\n          }\n          onDismiss={() => setInviteModal(false)}\n        >\n          <Text>Invite a new admin</Text>\n          <TextInput\n            autoFocus={true}\n            textContentType=\"emailAddress\"\n            mode=\"outlined\"\n            left={<TextInput.Icon name=\"email\" />}\n            error={errors.email && touched.email}\n            label=\"email\"\n            value={values.email}\n            ref={email}\n            onBlur={handleBlur(\"email\")}\n            onChangeText={handleChange(\"email\")}\n          />\n          <View style={styles.div} />\n          <Button mode=\"contained\" onPress={handleSubmit}>\n            Send Invite\n          </Button>\n        </Modal>\n      </Portal>\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n    theme: state.theme,\n  }),\n  null\n)(Home);\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Portal,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights.get(index[0])[index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n  const [cultureName, setCultureName] = useState<string>(culture.name);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights.get(key);\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        culture.specializedInsights.delete(key);\n        culture.specializedInsights.set(title, specialized);\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    // set dirty if any changes have been made.\n    const prevName = culture.name;\n    const dirty =\n      category !== title ||\n      summary !== insight.summary ||\n      info !== insight.information ||\n      srcData !== insight.source.data ||\n      srcType !== insight.source.type ||\n      cultureName !== prevName;\n\n    culture.name = cultureName;\n\n    props.navigation.navigate(\"Culture\", {\n      cultureName: culture.name,\n      prevName: prevName,\n      dirty: dirty,\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.view}>\n      <TextInput\n        style={styles.input}\n        value={cultureName}\n        placeholder=\"Culture Name\"\n        label=\"Culture Name\"\n        mode=\"outlined\"\n        onChangeText={(text) => setCultureName(text)}\n      />\n      {isSpecialized && (\n        <TextInput\n          style={styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <Portal>\n        <FAB style={styles.fab} icon=\"check\" onPress={updateCulture} />\n      </Portal>\n    </SafeAreaView>\n  );\n}\n","import EditInsight from \"./EditInsight\";\n\nexport default EditInsight;\n","import * as Yup from \"yup\";\n\nexport default Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\nimport { Admin } from \"../../lib\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <Title style={styles.title}>Let's create a new password!</Title>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import Recovery from \"./Recovery\";\n\nexport default Recovery;\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../../redux\";\nimport { ThemeType } from \"../../theme\";\nimport { Storage } from \"../../storage\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(Storage.Theme, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => (\n          <IconButton {...props} icon=\"brightness-6\" onPress={handleChange} />\n        )}\n        right={(props) => (\n          <Checkbox\n            onPress={handleChange}\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n\n  input: {\n    padding: 20,\n  },\n\n  characterCounter: {\n    fontSize: 11,\n    right: 22,\n    position: \"absolute\",\n    bottom: 20,\n    paddingRight: 2,\n    paddingBottom: 2,\n  },\n\n  button: {\n    padding: 15,\n    margin: 10,\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../../lib\";\nimport styles from \"./styles\";\n\ndayjs.extend(relativeTime);\n\ntype Props = {\n  // Callback fired when \"Update All\" is pressed.\n  onUpdateFinish: (err: string | null) => void;\n};\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(props: Props): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n      props.onUpdateFinish(null);\n    } catch (err) {\n      props.onUpdateFinish(err.toString());\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      {expanded && (\n        <Button mode=\"contained\" onPress={() => update()}>\n          Update All\n        </Button>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { List, TextInput, Text, Button } from \"react-native-paper\";\n\nimport { Feedback as FeedbackSender } from \"../../lib\";\nimport styles from \"./styles\";\n\nconst characterLimit = 300;\n\ntype state = \"sending\" | \"sent\" | \"failed\" | \"writing\";\n\nexport default function Feedback(): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n  const [state, setState] = useState<state>(\"writing\");\n\n  const handleInput = (text: string) => {\n    if (text.length > characterLimit) {\n      return;\n    }\n\n    setFeedback(text);\n  };\n\n  const sendFeedback = async () => {\n    if (feedback === \"\") {\n      return;\n    }\n\n    setState(\"sending\");\n    try {\n      await FeedbackSender.send(feedback);\n    } catch (err) {\n      setState(\"failed\");\n      return;\n    }\n\n    setState(\"sent\");\n  };\n\n  const reset = () => {\n    setState(\"writing\");\n    setFeedback(\"\");\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        left={(props) => (\n          <List.Icon\n            {...props}\n            style={styles.leftIcon}\n            icon=\"message-reply-text\"\n          />\n        )}\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Feedback\"\n      >\n        {state === \"sent\" && (\n          <Button\n            icon=\"check\"\n            color=\"green\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={reset}\n          >\n            Thank you\n          </Button>\n        )}\n        {state === \"failed\" && (\n          <Button\n            icon=\"alert\"\n            color=\"yellow\"\n            mode=\"contained\"\n            style={styles.button}\n            onPress={() => setState(\"writing\")}\n          >\n            Try again later\n          </Button>\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <TextInput\n            style={styles.input}\n            mode=\"outlined\"\n            multiline={true}\n            label=\"Where can we improve?\"\n            value={feedback}\n            onChangeText={handleInput}\n            numberOfLines={4}\n            right={\n              state === \"writing\" ? (\n                <TextInput.Icon name=\"send\" onPress={() => sendFeedback()} />\n              ) : (\n                <TextInput.Icon name=\"check\" />\n              )\n            }\n          />\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <Text\n            style={styles.characterCounter}\n          >{`${feedback.length}/${characterLimit}`}</Text>\n        )}\n      </List.Accordion>\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton, Button } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Routes } from \"../../routes\";\nimport { Storage } from \"../../storage\";\nimport styles from \"./styles\";\n\ntype Props = {\n  token: string;\n  logout: () => void;\n  email: string;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n};\n\n/**\n * AccountSettings displays Log in/Log out and whether or not to remember the user's email.\n *\n * @param {Props} props\n * @returns {React.ReactElement} React Component\n */\nexport default function AccountSettings(props: Props): React.ReactElement {\n  const { token, email, logout, navigation } = props;\n\n  const [expanded, setExpanded] = useState(false);\n  const [remember, setRemember] = useState(false);\n\n  useEffect(() => {\n    const getEmail = async () => {\n      let email: string;\n      try {\n        email = await AsyncStorage.getItem(Storage.RememberedEmail);\n      } catch (err) {\n        setRemember(false);\n        return;\n      }\n\n      if (email) {\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  const rememberEmail = async () => {\n    switch (remember) {\n      case true:\n        try {\n          await AsyncStorage.removeItem(Storage.RememberedEmail);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(false);\n        break;\n      case false:\n        try {\n          await AsyncStorage.setItem(Storage.RememberedEmail, email);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(true);\n    }\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Account\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"account\" style={styles.leftIcon} />\n        )}\n      >\n        {token !== \"\" && (\n          <List.Item\n            title=\"Remember Email\"\n            onPress={() => rememberEmail()}\n            left={(props) => (\n              <IconButton\n                {...props}\n                icon=\"email\"\n                onPress={() => rememberEmail()}\n              />\n            )}\n            right={(props) => (\n              <Checkbox\n                onPress={() => rememberEmail()}\n                {...props}\n                status={remember ? \"checked\" : \"unchecked\"}\n              />\n            )}\n          />\n        )}\n      </List.Accordion>\n      {expanded && (\n        <View>\n          {!token ? (\n            <Button\n              icon=\"login\"\n              mode=\"contained\"\n              onPress={() => {\n                navigation.navigate(\"Login\");\n              }}\n            >\n              Log In\n            </Button>\n          ) : (\n            <Button\n              icon=\"logout\"\n              mode=\"contained\"\n              onPress={() => {\n                logout();\n                navigation.navigate(\"Home\");\n              }}\n            >\n              Log Out\n            </Button>\n          )}\n        </View>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, Linking } from \"react-native\";\n\nimport {\n  Divider,\n  List,\n  IconButton,\n  Snackbar,\n  Portal,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { disclaimerURL } from \"../../constants\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport Feedback from \"./Feedback\";\nimport AccountSettings from \"./AccountSettings\";\nimport styles from \"./styles\";\n\ntype Props = {\n  resetUser: () => void;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n  token: string;\n  email: string;\n};\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nfunction Settings(props: Props): React.ReactElement {\n  const { token, email, resetUser, navigation } = props;\n\n  const openLink = () => Linking.openURL(disclaimerURL);\n  const [msg, setMsg] = useState(\"\");\n\n  return (\n    <ScrollView>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={openLink}\n        left={(props) => (\n          <IconButton\n            {...props}\n            style={styles.leftIcon}\n            onPress={openLink}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton\n            {...props}\n            icon=\"eye\"\n            style={styles.rightIcon}\n            onPress={openLink}\n          />\n        )}\n      />\n      <Divider />\n      <AccountSettings\n        email={email}\n        navigation={navigation}\n        token={token}\n        logout={resetUser}\n      />\n      <Divider />\n      <Feedback />\n      <Divider />\n      <DownloadedCultures\n        onUpdateFinish={(err) => setMsg(err || \"Update finished\")}\n      />\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </ScrollView>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Settings\">;\n    }\n  ) => ({\n    token: state.user.token,\n    email: state.user.user.email,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(Settings);\n","import Settings from \"./Settings\";\n\nexport default Settings;\n","import { Culture } from \"./lib\";\n\n/**\n * React Navigation Routes, for Mobile.\n *\n * Add type definitions and parameters for routes in {@link StackNavigator}\n */\nexport type Routes = {\n  /**\n   * Displays information about a culture, looking up information about that\n   * culture by provided prop {@link cultureName}.\n   *\n   * For admins it allows editing and adding information about a particular culture.\n   */\n  Culture: { cultureName: string; prevName?: string; dirty?: boolean };\n\n  /**\n   * Displays an interface to edit a {@link Culture} {@link GeneralInsight}\n   * and {@link SpecializedInsight}\n   *\n   * Admin **ONLY** route\n   */\n  EditInsight: { culture: Culture; index: number | [string, number] };\n\n  /**\n   * Displays Cultures allowing for downloads and seeing information\n   * about that culture and Admins.\n   *\n   * To see Admins must be logged in, to see others you need to\n   * be a superUser.\n   *\n   * Cultures can be deleted and edited.\n   */\n  Home: undefined;\n\n  /**\n   * Allows creation of a new admin account.\n   *\n   * @remark Route sent via email.\n   */\n  Register: { token: string };\n\n  /**\n   * Allows admin Login, Account recovery, and remembering the user's\n   * email between logins.\n   */\n  Login: undefined;\n\n  /**\n   * Allows Admin account recovery, requires the token and updates the Admin\n   * in the Api in order to update their password.\n   */\n  Recovery: { token: string; email: string };\n\n  /**\n   * Settings page displays downloaded cultures, dark theme, and disclaimer\n   * for application.\n   */\n  Settings: undefined;\n};\n\n/**\n * React Navigation links {@link Routes} to Web URLs.\n */\nexport const Linking = {\n  prefixes: [\"/\"],\n  config: {\n    screens: {\n      Home: \"/\",\n      Login: \"login\",\n      Register: \"register/:token\",\n      Recovery: \"recovery/:email/:token\",\n      Culture: {\n        path: \"culture/:cultureName\",\n        parse: {\n          cultureName: (cultureName: string) => decodeURI(cultureName),\n        },\n        screens: {\n          general: \"general\",\n          specialized: \"specialized\",\n        },\n      },\n      EditInsight: \"culture/edit/:culture/:index\",\n      Settings: \"settings\",\n    },\n  },\n};\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  Culture,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n} from \"./views\";\n\nimport { Routes, Linking } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\nimport { Storage } from \"./storage\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(Storage.Theme)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n\n  return (\n    <NavigationContainer\n      linking={Linking}\n      theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n    >\n      <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n        <StatusBar style={theme === \"Dark\" ? \"light\" : \"dark\"} />\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen\n            name=\"Culture\"\n            component={Culture}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Login\"\n            component={Login}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Register\"\n            component={Register}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"EditInsight\"\n            component={EditInsight}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Settings\"\n            component={Settings}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n          <Stack.Screen\n            name=\"Recovery\"\n            component={Recovery}\n            options={{\n              headerTitleAlign: \"left\",\n              headerBackTitleVisible: false,\n            }}\n          />\n        </Stack.Navigator>\n      </PaperProvider>\n    </NavigationContainer>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}